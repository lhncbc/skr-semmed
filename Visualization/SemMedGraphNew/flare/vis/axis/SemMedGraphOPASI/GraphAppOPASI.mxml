<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:fc="http://www.adobe.com/2006/fc"
	xmlns:graph="semmed.*"
    layout="absolute" creationComplete="startUp()" width="100%" xmlns:ns1="com.flashlit.shared.component.*" enterState="myGraph.unglow()">
	 <mx:states>
	 	 <mx:State name="citation">
	 	 	 <mx:AddChild position="lastChild">
	 	 	 	 <mx:Canvas y="100" width="800" height="80%" horizontalCenter="0">
	 	 	 	 	 <mx:Panel x="0" y="0" width="100%" height="100%" layout="absolute" title="Citations"  addedEffect="{fadeIn}" removedEffect="{fadeOut}" showEffect="{fadeIn}" hideEffect="{fadeOut}">
	 	 	 	 	 	 <mx:Button label="Close" right="10" bottom="10" click="currentState=''"/>
	 	 	 	 	 	 <mx:VBox x="10" y="10" width="868" height="469" bottom="40" left="10" right="10" top="10" autoLayout="true" id="citationsVbox">

							 <!--
	 	 	 	 	 	 	 <mx:TextArea width="100%" height="100%" id="citationsText" wordWrap="true" editable="true" enabled="true"/>
							 -->

	 	 	 	 	 	 </mx:VBox>
	 	 	 	 	 </mx:Panel>
	 	 	 	 </mx:Canvas>
	 	 	 </mx:AddChild>
	 	 	 <mx:SetProperty target="{myGraph}" name="enabled" value="false"/>
	 	 </mx:State>
	 	 <mx:State name="relevant">
	 	 	 <mx:SetProperty target="{vbox1}" name="width" value="50%"/>
	 	 	 <mx:AddChild relativeTo="{accordion1}" position="before">
				 <mx:VBox width="30%" height="100%">
					 <mx:VDividedBox width="100%" height="100%">
						<mx:VBox width="100%" height="50%">
								 <mx:HBox width="50%">
								    <mx:RadioButton label="Relevant Citations" id="relevantRadio" selected="true" groupName="relevantNonRelevantGroup" click="filter(false);centerOnVisible();deselectAll()"/>
									<mx:Button label="Save To File" id="saveButton" click="saveFile()"/>
									</mx:HBox>
							     <mx:List  width="100%" height="100%"  dragEnabled="true" dropEnabled="true" allowMultipleSelection="true"
								dragMoveEnabled="true" id="relevantList" dataProvider="{relevants.citation}" updateComplete="filter(false);centerOnVisible()" horizontalScrollPolicy="on"
								doubleClickEnabled="true" itemRenderer="TitleRenderer"></mx:List>
						 </mx:VBox>
						 <mx:VBox width="100%" height="50%">
							 <mx:RadioButton label="Non-Relevant Citations" id="nonRelevantRadio" groupName="relevantNonRelevantGroup" click="filter(false);centerOnVisible();deselectAll()"/>
							 <mx:List width="100%" height="100%" dragEnabled="true" dropEnabled="true"
								allowMultipleSelection="true"   updateComplete="filter(false);centerOnVisible()" dragMoveEnabled="true" id="nonRelevantList"
								dataProvider="{nonRelevants.citation}" creationComplete="addListener()" horizontalScrollPolicy="on" doubleClickEnabled="true"
								itemRenderer="TitleRenderer"></mx:List>
						 </mx:VBox>
					 </mx:VDividedBox>
					 <!--
					 <mx:RadioButton label="All Citations" id="allRadio" selected="false" groupName="relevantNonRelevantGroup"/>
					 -->
				 </mx:VBox>
	 	 	 </mx:AddChild>
	 	 </mx:State>
		 <mx:State name="relevantCitation" basedOn="relevant">
	 	 	 <mx:AddChild position="lastChild">
	 	 	 	 <mx:Canvas y="100" width="800" height="80%" horizontalCenter="0">
	 	 	 	 	 <mx:Panel x="0" y="0" width="100%" height="100%" layout="absolute" title="Citations">
	 	 	 	 	 	 <mx:Button label="Close" right="10" bottom="10" click="currentState='relevant'"/>
	 	 	 	 	 	 <mx:VBox x="10" y="10" width="868" height="469" bottom="40" left="10" right="10" top="10" autoLayout="true" id="relevantCitationsVbox">

							 <!--
	 	 	 	 	 	 	 <mx:TextArea width="100%" height="100%" id="relevantCitationsText" wordWrap="true" editable="true" enabled="true"/>
							 -->
	 	 	 	 	 	 </mx:VBox>
	 	 	 	 	 </mx:Panel>
	 	 	 	 </mx:Canvas>
	 	 	 </mx:AddChild>
	 	 </mx:State>
		 <mx:State name="no_results">
			 <mx:RemoveChild target="{mainBox}"/>
			 <mx:AddChild position="lastChild">
				 <mx:Panel x="0" y="0" height="100%" width="100%" title="Error">
					 <mx:Label text="There seems to be no data to visualize. Please press the 'Visualize' button." x="20" y="20"/>
				 </mx:Panel>
			 </mx:AddChild>
		 </mx:State>
	 </mx:states>
	 <mx:Style>
        .text {
            color: #222222;
            font-family: Verdana;
        }
    </mx:Style>


	<mx:Fade id="fadeOut" duration="1000" alphaFrom="1.0" alphaTo="0.0"/>
    <mx:Fade id="fadeIn" duration="1000" alphaFrom="0.0" alphaTo="1.0"/>


    <mx:HTTPService id="service"/>
	<mx:HTTPService id="citations"/>
	<mx:HTTPService id="relevantDocuments"/>

	<mx:Script>
		<![CDATA[
			import flare.animate.interpolate.PointInterpolator;
			import mx.collections.ListCollectionView;
			import mx.collections.ArrayCollection;
			import mx.controls.HRule;
			import mx.controls.CheckBox;
			import mx.controls.Menu;
			import flare.vis.data.EdgeSprite;
			import flare.vis.data.NodeSprite;
			import mx.controls.TextArea;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.ListEvent;

			import semmed.NodeData;
			import semmed.GraphVisualizer;
			import semmed.EdgeRenderer;

			import mx.rpc.events.ResultEvent;
			import flash.events.MouseEvent;
			import flash.geom.Point;
			import mx.events.MenuEvent;
			import flash.filesystem.*;

    		public  var myfile:FileReference;

			public var draggingWhole:Boolean = false;
			public var draggingLittle:Boolean = false;


			[Bindable]
			public var zoom:Number=1.0;

			[Bindable]
            public var layoutOptions: Array = [
	           {label:"Spring", data:0},
			   {label:"Node-Link Tree", data:1},
			   {label:"Circle", data:2 },
			   {label:"Radial",data:3}];

			[Bindable]
			public var linkOptions: Array = [
				{label:"UMLS"},
				{label:"EntrezGene"},
				{label:"OMIM"},
				{label:"GHR"}];

            private var selectedCitations :String;

            private var selectedText :Array;

            private var currentPos:Object = {x:0,y:0};

            private var predicates:Array;

            private var semTypes:Array;

            private var predicateFilters:Array;

			private var semtypeFilters:Array;

            private var seed:Object;


			private var oldCenter:Point;

			private var firstTime=true;

			private var showingRelevantCitation:Boolean;

            [Bindable]
            public var relevants:Object;

            [Bindable]
            public var nonRelevants:Object;

			[Bindable]
			public var searchedConcepts:Array;

			public function startUp():void
			{
				service.addEventListener("result",infoCallback);
				service.url="../servlet/RetrieveGraph?key="+Application.application.parameters.graphKey;
				service.send();


				relevantDocuments.addEventListener(ResultEvent.RESULT,resultsCallback);
				relevantDocuments.url="../servlet/RetrieveGraph?doc=t&key="+Application.application.parameters.graphKey;
                relevantDocuments.send();

                //relevantDocuments.send();
			}

			private function nodeClick(evt:MouseEvent):void{

			}

			//interprets lists of relevant and nonrelevant citations
			private function resultsCallback(event:ResultEvent):void {

				relevants = event.result.citations.relevants;
				nonRelevants = 	event.result.citations.nonrelevants;

				if (!relevants && !nonRelevants)
					relevantButton.enabled = false;

				if (relevants==null)
					relevants = new Object();
				if (nonRelevants==null)
					nonRelevants = new Object();
			}

			//interprets graph xml
			private function infoCallback(event:ResultEvent) : void{

            	var xml:Object = event.result;

				if (xml == null) {
					noResults();
					return;
				}else if (xml.graph==null) {
					noResults();
					return;
				}

				seed = {name:xml.graph.seed.value,node:null};

				semTypes = new Array();

				if (xml.graph.node.hasOwnProperty("id"))
	            	loadNode(xml.graph.node,semTypes);
				else
	   				for each(var node:Object in xml.graph.node)
	            		loadNode(node,semTypes);

	            predicates = new Array();


          	    if (xml.graph.edge.hasOwnProperty("target"))
          	    	loadEdge(xml.graph.edge,predicates);
          	    else
          	    	for each(var edge:Object in xml.graph.edge)
          	    		loadEdge(edge,predicates);


	            var h:HRule = new HRule;
	            var label:Label = new Label;

	            label.text = "Predicates";
	            form1.addChild(label);
	            form1.addChild(h);

	            predicateFilters = new Array();
	            for(var k:int=0;k<predicates.length;k++){
	            	var cb:CheckBox = new CheckBox();
	            	filters.push(cb);
	            	cb.selected = true;
	            	cb.label = predicates[k].label;
	            	cb.setStyle("color", predicates[k].color);
					cb.setStyle("fillColors", [predicates[k].color, 0xAAAAAA]);
					cb.setStyle("fillAlphas", [1, 1]);
	            	form1.addChild(cb);
	            	predicateFilters.push(cb);
	            	cb.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
	            		filter();
	            	});
	            }

	            form1.addChild(new HRule());
	            label = new Label();
	            label.text = "Semantic Types";
	            form1.addChild(label);
	            form1.addChild(new HRule());

				semtypeFilters = new Array();
	           	for each(var sem:Object in semTypes){
	           		var cb2:CheckBox = new CheckBox();
	           		cb2.label = sem.semtype;
	           		cb2.setStyle("color", sem.color);
					cb2.setStyle("alpha", 1);
					cb2.setStyle("fillColors",[sem.color, sem.color]);
					cb2.setStyle("fillAlphas", [1, 1]);
					cb2.selected = true;
					//cb2.enabled = false;
					semtypeFilters.push(cb2);
	           		form1.addChild(cb2);
					cb2.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
	            		filter();
	            	});
	           	}

				for each(var node2:NodeSprite in myGraph.dataF.nodes)
					if (node2.data.name == seed.name) {
						seed.node = node2;
						break;
					}


				myGraph.loadData();
//				if (seed.node)
//					trace("Your seed is " + seed.node.data.name);
				myGraph.setRoot(seed.node);


	            myGraph.play();


				centerOnConcept(seed.node);
				myGraph.redraw();

            }

			private function enterFirstState():void {
				//centerOnConcept(seed.node);
				if (oldCenter)
					moveToCenter(oldCenter.x, oldCenter.y,true);
			}

			private function centerOnVisible():void {
				//if (!firstTime)
				//	return;
				if (seed.node && seed.node.visible) {
					var n:NodeSprite = seed.node as NodeSprite;
					trace("I'm centering on root");
					moveToCenter(n.parent.x + n.x, n.parent.y + n.y, true);
				}else
					for each(var node:NodeSprite in myGraph.dataF.nodes)
						if (node.visible) {
							trace("I'm centering on something");
							moveToCenter(node.parent.x + node.x, node.parent.y + node.y, true);
							break;
						}
				firstTime = false;
			}

            private function dragIt(event:MouseEvent):void{
            	if (draggingWhole){
            		myGraph.x-=currentPos.x-event.stageX;
            		myGraph.y-=currentPos.y-event.stageY;
	            }
	            currentPos.x = event.stageX;
	            currentPos.y = event.stageY;
            }

            private function zoomIt(event:MouseEvent):void {

				if (event.delta > 0) {
					var center:Point = getViewportCenter();
					zoom*=1.5;
					myGraph.scaleX = zoom;
					myGraph.scaleY = zoom;
					moveToCenter(center.x, center.y);
				}else if (event.delta < 0) {
					var center:Point = getViewportCenter();
					zoom/=1.5;
					myGraph.scaleX = zoom;
					myGraph.scaleY = zoom;
					moveToCenter(center.x, center.y);
				}
            }


			private function hexToInt(s:String):uint{

				var val:uint=0;

				for(var i:int=0;i<s.length;i++){
					var c:String = s.charAt(i);

					val *= 16;
					if (c=='0')
						val+=0;
					else if (c=='1')
						val+=1;
					else if (c=='2')
						val+=2;
					else if (c=='3')
						val+=3;
					else if (c=='4')
						val+=4;
					else if (c=='5')
						val+=5;
					else if (c=='6')
						val+=6;
					else if (c=='7')
						val+=7;
					else if (c=='8')
						val+=8;
					else if (c=='9')
						val+=9;
					else if (c=='A')
						val+=10;
					else if (c=='B')
						val+=11;
					else if (c=='C')
						val+=12;
					else if (c=='D')
						val+=13;
					else if (c=='E')
						val+=14;
					else if (c=='F')
						val+=15;
				}

				return val;
			}


			private function initConceptMenu():void {
                //var myMenu:Menu = new Menu();
                //myMenu.dataProvider = linkOptions;
                //myMenu.addEventListener("itemClick", changeHandler);
                //conceptPopUp.popUp = myMenu;
            }

             private function changeHandler(event:MenuEvent):void {
                //var label:String = event.label;
                //conceptPopUp.label = label;
                //conceptPopUp.close();
            }

            private function retrieveCitations():void{
            	var ids:Array = selectedCitations.split(",");

            	// var url:String = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&retmode=xml";
				var url:String ="";
				var tempString:String;

				if (relevantRadio){
            		if (relevantRadio.selected) {
						for each(var ss:String in ids)
							for each(var cui:Object in relevantList.dataProvider) {
								tempString = new String(cui.data);
								if (ss != null && tempString == ss){
									url = url + trim(ss) +"EON";
								}
							}
            		}else{
            			for each(var ss:String in ids)
							for each(var cui:Object in nonRelevantList.dataProvider) {
								tempString = new String(cui.data);
								if (ss != null && tempString == ss)
									url = url + trim(ss) +"EON";

							}
					}
            	}else
					for each(var ss:String in ids) {
						if(ss != null)
								url = url + trim(ss) + "EON";
					}

				url = escape(url);

				import mx.rpc.http.HTTPService;
        		var citationID:mx.rpc.http.HTTPService = new mx.rpc.http.HTTPService();
				var params:Object = {};
				params["getCitation"] = url;
				citationID.addEventListener(ResultEvent.RESULT,printCitationCallback);
				citationID.url="../servlet/RetrieveGraph";
				citationID.method = "POST";
				citationID.send(params);
            }

            private function printCitationCallback(event:ResultEvent) : void {
            	var xml:Object = event.result;
            	var totalS:String = "";
            	var textPanel:VBox;
				textPanel = citationsVbox;
				textPanel.removeAllChildren();
				/* for each (var e:String in selectedText) {
					totalS = totalS + "|||" + e + "|||<br>";
				} */
				if(xml.GRANTLIST.GRANT.hasOwnProperty("ID")) {
            	 		totalS+="<h1>ID: " + xml.GRANTLIST.GRANT.ID + "</h1><br>";
            			// totalS+="<h2>Title: "+escapeHTML(highlightSelected(xml.GRANTLIST.GRANT.TITLE, selectedText))+"</h2>";
            			totalS+="<h2>Title: "+ escapeHTML(xml.GRANTLIST.GRANT.TITLE)+"</h2>";
						totalS += "<h2>Abstract:</h2><p> ";
						if(xml.GRANTLIST.GRANT.ABSTRACT != null)
							totalS += escapeHTML(xml.GRANTLIST.GRANT.ABSTRACT) + "</p>";
							// totalS += highlightSelected(xml.GRANTLIST.GRANT.ABSTRACT, selectedText) + "</p>";
						else
							totalS += "NO ABSTRACT FOUND. </p>";

						totalS += "<br><h2>Specific Aims:</h2><p> ";
						if(xml.GRANTLIST.GRANT.SPEDIFICAIMS != null)
							totalS += escapeHTML(xml.GRANTLIST.GRANT.SPEDIFICAIMS) + "</p>";
							// totalS += highlightSelected(xml.GRANTLIST.GRANT.SPEDIFICAIMS, selectedText) + "</p>";
						else
							totalS += "NO SPECIFICAIMS FOUND.</p>";
						totalS = highlightSelected(totalS,selectedText);
						createText(totalS, textPanel,"");
				} else {
            		for each (var article:Object in xml.GRANTLIST.GRANT){
            			totalS+="<h1>ID: " + article.ID + "</h1><br>";
            	    	totalS+="<h2>Title: " + escapeHTML(article.TITLE) + "</h2>";
            	    	// totalS+="<h2>Title: " + highlightTitleSelected(article.TITLE, selectedText) + "</h2>";
						totalS += "<h2>Abstract:</h2><p> ";
						if(article.ABSTRACT != null)
							totalS += escapeHTML(article.ABSTRACT) + "</p>";
							// totalS += highlightSelected(article.ABSTRACT, selectedText) + "</p>";
						else
							totalS += "NO ABSTRACT FOUND.</p>";

				 		totalS += "<br><h2>Specific Aims:</h2><p> ";
						if(article.SPEDIFICAIMS != null)
							totalS += escapeHTML(article.SPEDIFICAIMS)+ "</p>";
							// totalS += highlightSelected(article.SPEDIFICAIMS, selectedText)+ "</p>";
						else
							totalS += "NO SPECIFICAIMS FOUND. </p>";

						totalS = highlightSelected(totalS,selectedText);
						createText(totalS, textPanel,"");
						totalS = "";
					}
				}
            }

           public function trim(txt_str:String):String {
				while (txt_str.charAt(0) == " ") {
					txt_str = txt_str.substring(1, txt_str.length);
				}
				while (txt_str.charAt(txt_str.length-1) == " ") {
					txt_str = txt_str.substring(0, txt_str.length-1);
				}
				return txt_str;
			}

			public function createText(s:String,ui:UIComponent,pmid:Object):TextArea {
				var t:TextArea = new TextArea();
				// var c:CheckBox = new CheckBox();
				// c.label = "Select "+pmid;
				//c.selected = true;
				// c.data = pmid;
				// ui.addChild(c);
				ui.addChild(t);
				//t.addChild(c);
				//c.x = 150;
				//c.y = 10;
				t.percentWidth = 100;
				t.height = 400;
				t.htmlText = s;
				// t.html = true;
				// t.text = s;


				var ss:StyleSheet = new StyleSheet();
				var h1:Object = new Object();
		        h1.fontFamily = "Verdana, Arial, Geneva, sans";
		        h1.fontWeight = "bold";
		        h1.color = "#6600CC";
		        h1.fontSize = 16;
		        h1.leading = 10;

		        var h2:Object = new Object();
		        h2.fontFamily = "Verdana, Arial, Geneva, sans";
		        h2.fontWeight = "bold";
		        h2.color = "#666666";
		        h2.fontSize = 16;
		        h2.leading = 4;

		        var para:Object = new Object();
		        para.fontFamily = "Georgia, Times New Roman, serif";
		        para.fontStyle = "normal";
		        para.leading = 4;
		        para.fontSize = 12;
		        para.display = "block";
		        para.color = "#000000";
		        para.fontWeight="normal";

		        var a:Object = new Object();
		        a.fontStyle = "normal";
		        a.leading = 4;
		        a.fontSize = 12;
		        //a.fontSize = 16;
		        a.color = "#0066FF";
		        //a.color= "#00FF00";
		        a.textDecoration = "underline";

		        var h3:Object = new Object();
		        // h3.color = "#FF0000";
		        h3.color = "#FF5500";
		        h3.backgroundColor = "#FFFF00";
				h3.fontWeight = "bold";
				// h3.fontStyle = "italic";

		        ss.setStyle("h1", h1);
		        ss.setStyle("h2", h2);
		        ss.setStyle("p", para);
		        ss.setStyle("a", a);
		        ss.setStyle("h3", h3);
				t.styleSheet = ss;

				// c.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {
				//		var d:Object = event.target.data;

				//		if (c.selected){
				//			select(c.data);
				//			moveItem(c.data);
				//		}else{
				//			deselect(c.data);
				//			moveItem(c.data);
				//		}
				// });

				return t;
			}


			public function moveItem(item:Object):void {
				var source:List = null;
				var destination:List = null;
				var selectedItem:Object;
				var index:Number=0;

				for each(var element:Object in relevantList.dataProvider) {
					if (element.data == item) {
						source = relevantList;
						destination = nonRelevantList;
						selectedItem = element;
						trace("Found it in relevants");
						break;

					}
					index++;
				}

				if (!source) {
					index = 0;
					for each(var element:Object in nonRelevantList.dataProvider) {
						if (element.data == item) {
							source = nonRelevantList;
							destination = relevantList;
							selectedItem = element;
							trace("found it in non-releavants");
							break;
						}
						index++;
					}
				}
				trace("it's item " + index);
				destination.dataProvider.addItem(selectedItem);
				source.dataProvider.removeItemAt(index);
				//source.selectedItems.push(selectedItem);

				var selectedItems:Array = new Array();
				for each(element in source.selectedItems)
					selectedItems.push(element);
				selectedItems.push(selectedItem);
				source.selectedItems = selectedItems;
			}

			public function select(s:Object) {

				if (!relevantList || !nonRelevantList)
					return;

				var ss:String = new String(s);
				var p:Array;


				if (relevantRadio.selected) {
					p= new Array();
					for each(var item:Object in relevantList.selectedItems)
						p.push(item);
					for each (item in relevantList.dataProvider) {
						var ss2:String = new String(item.data);
						if (ss == ss2)
							p.push(item);
					}
					relevantList.selectedItems = p;
				}


				if (nonRelevantRadio.selected) {
					p= new Array();
					for each(var item:Object in nonRelevantList.selectedItems)
						p.push(item);
					for each (item in nonRelevantList.dataProvider) {
						var ss2:String = new String(item.data);
						if (ss == ss2)
							p.push(item);
					}
					nonRelevantList.selectedItems = p;
				}
			}

			public function deselect(s:Object) {

				if (!relevantList || !nonRelevantList)
					return;

				var ss:String = new String(s);
				var p:Array;

				if (relevantRadio.selected){
					p = new Array();
					for each (var item:Object in relevantList.selectedItems) {
						var ss2:String = new String(item.data);
						if (ss != ss2)
							p.push(item);
					}
					relevantList.selectedItems = p;
				}

				if (nonRelevantRadio.selected){
					p = new Array();
					for each (item in nonRelevantList.selectedItems) {
						var ss2:String = new String(item.data);
						if (ss != ss2)
							p.push(item);
					}
					nonRelevantList.selectedItems = p;
				}
			}

            public function escapeHTML(s:String):String{

				s = s.replace( />/g, "&lt;");
				s = s.replace( /</g, "&gt;");
				//var s2:String;
           		//while ((s2=s.replace("<","&lt;"))!=s)
           		//	s = s2;
	        	//while ((s2=s.replace(">","&gt;"))!=s)
           		//	s = s2;

           		//s=s2;
            	//var pattern:RegExp;
				//for each (var e:String in a) {
				//	pattern = new RegExp(e, "ig");
            	//	s = s.replace(pattern, "<b>" + e + "</b>");
				//}

            	return s;
            }

           public function escapeHTML2(s:String):String{

				s = s.replace( />/g, "&lt;");
				s = s.replace( /</g, "&gt;");

            	return s;
            }

			public function unRegexp(s:String):String {
				 // var s:String ="";
				 s = s.replace( /\s{1,3}/g, " ");
				 /* for(var i:int=0;i<dirtys.length;i++){
						var c:String = dirtys.charAt(i);
						if(c != '\n' && c != '\r' && c != '\t' && c != '\f')
							s = s.concat(c);
						else
							s = s.concat(' ');
				 } */
				 s = s.replace( /\(/g, "\\(");
				 s = s.replace( /\)/g, "\\)");
				 s = s.replace( /\-/g, "\\-");
				 s = s.replace( /\?/g, "\\?");
				 s = s.replace( /\+/g, "\\+");
				 s = s.replace( /\*/g, "\\*");
				 s = s.replace( /\[/g, "\\[");
				 s = s.replace( /\]/g, "\\]");
				 s = s.replace( /\|/g, "\\|");
				 s = s.replace( /\//g, "\\/");
				 s = s.replace( /\^/g, "\\^");
				 s = s.replace( /\&/g, "\\&");
				 s = s.replace( /\;/g, "\\;");
				 s = s.replace( /\:/g, "\\:");
				return s;
			}

			public function highlightSelected(s:String, a:Array):String {
				var pattern:RegExp;
				// var cleans:String ="";
				s = s.replace( /\s{1,3}/g, " ");
				/* for(var i:int=0;i<s.length;i++){
					var c:String = s.charAt(i);
					if(c != '\n' && c != '\r' && c != '\t' && c != '\f')
						cleans = cleans.concat(c);
					else
						cleans = cleans.concat(' ');
				} */
				for each (var e:String in a) {
					pattern = new RegExp(e, "ig");
            		s = s.replace(pattern, "<h3>$&</h3>");
				}
				return s;
			}

			public function highlightTitleSelected(s:String, a:Array):String {
				// Remove the "." at the end of the pattern since it was inserted intentionally in the SemRep
				var pattern:RegExp;
				var modiString:String;
				for each (var e:String in a) {
					var me:String;
					if(e.charAt(e.length-1) == '.') {
						me = e.substr(0, e.length-1);
					} else
						me = e;
					pattern = new RegExp(me, "ig");
            		s = s.replace(pattern, "<h3>$&</h3>");
				}
				return s;
			}

            public function loadNode(node:Object,semTypes:Array):void{
            	var nodeSprite:NodeSprite = myGraph.dataF.addNode({CUI:node.id,name:node.name,semtype:node.semtype,umlks:null,extra:null});

            	if (node.name == seed.name)
            		seed.node = nodeSprite;

            	if (node.hasOwnProperty('umlsks_url'))
            		nodeSprite.data.umlks = node.umlsks_url;
            	if (node.hasOwnProperty('ghr_url'))
            		nodeSprite.data.ghr = node.ghr_url;
				if (node.hasOwnProperty('omim_url'))
					nodeSprite.data.omim = node.omim_url;
				if (node.hasOwnProperty('entrezgene_url'))
					nodeSprite.data.entrez = node.entrezgene_url;


           		var text:TextField = new TextField();
           		text.x=0;
           		text.y=0;
				text.text = node.name;
				text.autoSize = TextFieldAutoSize.LEFT;
				text.selectable = false;
				text.x = -text.width/2;
				nodeSprite.addChild(text);
				nodeSprite.trueFillAlpha = 0.7;
				if (node.hasOwnProperty('color'))
					nodeSprite.trueFillColor = hexToInt(node.color.substring(1));
				nodeSprite.trueLineAlpha = 0.1;
				nodeSprite.trueLineColor = 0x000000;

				nodeSprite.addEventListener(MouseEvent.MOUSE_DOWN,function(event:MouseEvent):void{
					draggingLittle = true;
					nodeSprite.startDrag();
				});

				nodeSprite.addEventListener(MouseEvent.MOUSE_UP,function(event:MouseEvent):void{
					draggingLittle = false;
					nodeSprite.stopDrag();
					myGraph.redraw();
				});

				nodeSprite.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
					if (event.target.hasOwnProperty("data") && event.target.data.hasOwnProperty("CUI")){
						conceptLabel.text = event.target.data.name;
						cuiLabel.text = event.target.data.CUI;
						semtypeLabel.text = event.target.data.semtype;
						showConcept();
						myGraph.unglow();
						if (event.target.data.nPredications)
							nodePredicationLabel.text = event.target.data.nPredications;
						else
							nodePredicationLabel.text = "0";
						if (event.target.data.umlks!=null){
							umlsLink.text = event.target.data.umlks;
							umlsButton.enabled = true;
						}else
							umlsButton.enabled = false;
						if (event.target.data.ghr!=null){
							ghrLink.text = event.target.data.ghr;
							ghrButton.enabled = true;
						}else
							ghrButton.enabled = false;

						if (event.target.data.omim!=null){
							omimLink.text = event.target.data.omim;
							omimButton.enabled = true;
						}else
							omimButton.enabled = false;

						if (event.target.data.entrez!=null){
							entrezLink.text = event.target.data.entrez;
							entrezButton.enabled = true;
						}else
							entrezButton.enabled = false;
						accordion1.selectedIndex = 0;
					}
				});

				myGraph.allNodes.push(nodeSprite);

				var alreadyAdded:Boolean = false;

				for each(var o:Object in semTypes)
					if (o.semtype == node.semtype){
						alreadyAdded = true;
						break;
					}
				if (!alreadyAdded)
					semTypes.push({semtype:node.semtype,color:node.color});
            }

            public function loadEdge(edge:Object,predicates:Array):void{
            	var s:String;
            	var t:String;
            	var l:String;
            	var color:String;

           		s = edge.source;
           		t = edge.target;
           		l = edge.label;
           		color = edge.color;


				if (s == 'C0683474' && t == 'C0028754')
					trace("this is the one");

            	var source:NodeSprite = null;
            	for(var i:int = 0;i<myGraph.dataF.nodes.size;i++){
            		if (myGraph.dataF.nodes[i].data.CUI == s){
            			source = myGraph.dataF.nodes[i];
            			break;
            		}
            	}

            	var target:NodeSprite = null;
            	for(var j:int = 0;j<myGraph.dataF.nodes.size;j++){
            		if (myGraph.dataF.nodes[j].data.CUI == t){
            			target = myGraph.dataF.nodes[j];
            			break;
            		}
            	}

				if (source.data.nPredications)
					source.data.nPredications++;
				else
					source.data.nPredications = 1;

				if (target.data.nPredications)
					target.data.nPredications++;
				else
					target.data.nPredications = 1;

            	var e:EdgeSprite = myGraph.dataF.addEdgeFor(source,target,true,{predicate:l,citation:"",subject:source.data.name,target:target.data.name});


            	myGraph.allEdges.push(e);
            	e.renderer = semmed.EdgeRenderer.instance;
            	e.fillColor = hexToInt(color.substring(1));
            	e.alpha = 1;
            	e.lineAlpha = 1;
            	e.lineWidth = 2;
            	e.buttonMode = true;

            	var contained:Boolean = false;
            	for(i = 0; i<predicates.length;i++)
            		if (predicates[i].label==l){
						contained = true;
						break;
            		}

				var sentences:Array = new Array();

            	if (!contained)
            		predicates.push({label:l,color:e.fillColor});

				var uniqueCitations:Number = 1;
            	var pmid:String;
            	var numPredication = 0; // Exact number of predication counting the size of the sentence (Duplicate counted, Dongwook Shin 06/30/2008
            	if (edge.sentence.hasOwnProperty("id")){
            		pmid  = edge.sentence.id;
            		pmid = pmid.substr(0, pmid.indexOf("."));
            		e.data.citation+=pmid+",";
            		sentences.push(unRegexp(escapeHTML(edge.sentence.text)));
            		// sentences.push(unRegexp(edge.sentence.text));
            		numPredication = edge.sentence.size;
            	}else{
	            	for each(var n:Object in edge.sentence){
	            		pmid = n.id;
	            		pmid = pmid.substr(0, pmid.indexOf("."));
						//if (e.data.citation && (e.data.citation as String).indexOf(pmid) == -1)
						//	uniqueCitations++;
	            		e.data.citation+=pmid+",";
	            		sentences.push(unRegexp(escapeHTML(n.text)));
	            		// sentences.push(unRegexp(n.text));
	            		numPredication = numPredication + n.size;
	            	}
	            }

            	e.data.sentences = sentences;
            	// e.data.predications = sentences.length;
            	e.data.predications = numPredication; // Duplicate predications in the same sentence counted also, Dongwook Shin 06/30/2008
				e.data.citationNumber = uniqueCitations;

            	e.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
					if (event.target.hasOwnProperty("data") && event.target.data.hasOwnProperty("predicate")){
						showEdge();
						predicateLabel.text = event.target.data.predicate;
						targetLabel.text = event.target.data.target;
						sourceLabel.text = event.target.data.subject;
						predicationNumberLabel.text = event.target.data.predications;


						selectedCitations = event.target.data.citation;

						var numberPredications:Number = 0;
						var numberCitations:Number = 0;
						var ids:Array = selectedCitations.split(",");

						ids.pop();



						var tempString:String;
						var unique:Array = uniqueIDS(ids);

						if (relevantRadio && relevantRadio.selected) {
							for each(var ss:String in ids)
								for each(var cui:Object in relevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberPredications++;
								}
							for each(ss in unique)
								for each(var cui:Object in relevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberCitations++;
								}
						}else if	(relevantRadio && nonRelevantRadio.selected){
							for each(var ss:String in ids)
								for each(var cui:Object in nonRelevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberPredications++;
								}
							for each(ss in unique)
								for each(cui in nonRelevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberCitations++;
								}
						}else{
							// numberPredications = ids.length;
							numberPredications = numPredication;
							numberCitations = unique.length;
						}

						predicationNumberLabel.text = new String(numberPredications);
						citationNumberLabel.text = new String(numberCitations);
						selectedText = event.target.data.sentences;
						accordion1.selectedIndex = 0;

						if ((relevants && relevants.citation) ||
						     (nonRelevants && nonRelevants.citation)) {
							highlightTitles(event.target as EdgeSprite);
						}
					}
				});
            }

			public function deselectAll():void {
				if (relevantList)
					relevantList.selectedIndex = -1;
				if (nonRelevantList)
					nonRelevantList.selectedIndex = -1;
				myGraph.unglow();
			}

			public function highlightTitles(edge:EdgeSprite) {
				if (!relevantList)
					return;
				var s:Array = uniqueIDS((edge.data.citation as String).split(","));
				relevantList.selectedIndex = -1;
				nonRelevantList.selectedIndex = -1;
				var r:Array = new Array();
				var n:Array = new Array();


				for each (var c:String in s) {
					if (relevantRadio.selected)
						for (var i:Number = 0; i < relevantList.dataProvider.length;i++ ) {
							var tempString:String = new String(relevantList.dataProvider[i].data);
							if (tempString == c)
								r.push(i);
						}
					if (nonRelevantRadio.selected)
						for (i = 0; i < nonRelevantList.dataProvider.length;i++ ) {
							var tempString:String = new String(nonRelevantList.dataProvider[i].data);
							if (tempString == c)
								n.push(i);
						}
				}
				relevantList.selectedIndices = r;
				nonRelevantList.selectedIndices = n;
				relevantList.dispatchEvent(new ListEvent(ListEvent.ITEM_CLICK));
				myGraph.glowEdge(edge);
			}

			public function uniqueIDS(idsAll:Array):Array {
				var idsU:Array = new Array();
				for each(var a:String in idsAll) {
					var found:Boolean = false;
					for each (var i:String in idsU)
						if (i == a)
							found = true;
					if (!found)
					idsU.push(a);
				}
				return idsU;
			}

            public function addListener():void{
            	relevantList.addEventListener(MouseEvent. CLICK,function():void{
            		if (relevantRadio.selected)
	            		myGraph.glow(relevantList.selectedItems);
            	});
				// relevantList.addEventListener(MouseEvent.DOUBLE_CLICK, retrieveCitation);
            	nonRelevantList.addEventListener(MouseEvent.CLICK,function():void{
            		if (nonRelevantRadio.selected)
	            		myGraph.glow(nonRelevantList.selectedItems);
            	});
				// nonRelevantList.addEventListener(MouseEvent.DOUBLE_CLICK, retrieveCitation);
            }

            public function dragWhole():void{
            	if (!draggingLittle)
	            	draggingWhole = true;
            }

            public function stopDragWhole():void{
            	draggingWhole = false;
            }

			public function getViewportCenter():Point {
				var x:Number = -myGraph.x/zoom+(vbox1.width/2)/zoom;
				var y:Number = -myGraph.y/zoom + (vbox1.height / 2) / zoom;
				return new Point(x,y);
			}

			public function getWorldPosition(xS:Number, yS:Number):Point {
				var x:Number = -myGraph.x/zoom+(xS)/zoom;
				var y:Number = -myGraph.y/zoom + (yS) / zoom;
				return new Point(x,y);
			}

			public function moveToCenter(x:Number, y:Number, effect:Boolean = false):void {
				if (effect) {
					moveEffect.xFrom = myGraph.x;
					moveEffect.yFrom = myGraph.y;
					moveEffect.xTo = vbox1.width / 2 - x * zoom;
					moveEffect.yTo = vbox1.height / 2 - y * zoom;
					moveEffect.play();
				}else{
					myGraph.x = vbox1.width / 2 - x * zoom;
					myGraph.y = vbox1.height / 2 - y * zoom;
				}
			}

			public function noResults():void {
				currentState = 'no_results';
			}

			public function filter(t:Boolean=true):void {
				var p:Array = new Array();
	            for each (var c:CheckBox in predicateFilters)
	            	if (c.selected)
	            		p.push(c.label);
				var s:Array = new Array();
	            for each (c in semtypeFilters)
	            	if (c.selected)
	            		s.push(c.label);

				if (relevantRadio){
            		if (relevantRadio.selected)
            			myGraph.filterCitations(relevantList.dataProvider,p,s);
            		else
            			myGraph.filterCitations(nonRelevantList.dataProvider,p,s);
            	}else
            		myGraph.filter(p,s);
				myGraph.changeLayout(layoutChoose.selectedItem.data, t);
			}

			public function searchConcept():void {
				searchedConcepts = new Array();
				var p:RegExp = new RegExp(conceptSearch.text, "i");
				for each(var n:NodeSprite in myGraph.dataF.nodes){
					if (n.visible && (n.data.name as String).match(p))
						searchedConcepts.push( { label:n.data.name, node:n } );
				}
				searchList.dataProvider = searchedConcepts;
			}

			public function centerOnConcept(node:NodeSprite = null):void {

				var n:NodeSprite;
				if (node == null && searchList && searchList.selectedItem)
					n = searchList.selectedItem.node as NodeSprite;
				else
					n = node;

				if (n) {
					moveToCenter(n.parent.x+n.x, n.parent.y+n.y,true);
				}
			}

			public function captureCenter():void {
				oldCenter = myGraph.globalToLocal(vbox1.localToGlobal(new Point(vbox1.width / 2, vbox1.height / 2)))
			}

			public function showConcept():void {
				edgeInformation.visible = false;
				nodeInformation.alpha = 1.0;
				nodeInformation.visible = true;
				edgeInformation.visible = false;
				//nodeInformation.left = 10;
				//conceptLabel.left = 71;
				//conceptLabel.right = 10;
				//cuiLabel.left = 42;
				//cuiLabel.right = 10;
				//semtypeLabel.left = 85;
				//semtypeLabel.right = 10;
			}

			public function showEdge():void {
				nodeInformation.visible = false;
				edgeInformation.alpha = 1.0;
				edgeInformation.visible = true;


				/*
	 	 	 <mx:SetProperty target="{edgeInformation}" name="y"/>
	 	 	 <mx:SetStyle target="{edgeInformation}" name="bottom" value="0"/>
	 	 	 <mx:SetProperty target="{edgeInformation}" name="height"/>
	 	 	 <mx:SetStyle target="{edgeInformation}" name="top" value="315"/>
	 	 	 <mx:SetProperty target="{label1}" name="y" value="36"/>
	 	 	 <mx:SetProperty target="{predicateLabel}" name="y" value="36"/>





	 	 	 <mx:SetProperty target="{predicateLabel}" name="width" value="113.5"/>
	 	 	 <mx:SetProperty target="{predicateLabel}" name="x"/>
	 	 	 <mx:SetStyle target = "{predicateLabel}" name = "right" value = "10" / >
				 -->*/

			}

			public function saveFile():void {
        		// var relevantSetString = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelevantCitations>\n";
        		import mx.rpc.http.HTTPService;
        		var uploadRelevantDocuments:mx.rpc.http.HTTPService = new mx.rpc.http.HTTPService();
        		var relevantSetString:String;
        		var nonRelevantSetString:String;
				var titleString:String;
				var pmidString:String;
				var params:Object = {};
				relevantSetString = "<RelevantCitations>\n";

				for each(var data:Object in relevantList.dataProvider) {
				 		var relevantString:String;
				 		pmidString = new String(data.data);
						titleString = new String(data.label);
					  relevantString = "<Citation>\n<PMID>" + pmidString + "</PMID>\n<Title>" + titleString + "</Title>\n</Citation>\n";
						relevantSetString = relevantSetString + relevantString;
				}
				relevantSetString = relevantSetString + "</RelevantCitations>\n";
				nonRelevantSetString = "<NonrelevantCitations>\n";
				for each(var data:Object in nonRelevantList.dataProvider) {
				 		var nonRelevantString:String;
				 		pmidString = new String(data.data);
						titleString = new String(data.label);
					    nonRelevantString = "<Citation>\n<PMID>" + pmidString + "</PMID>\n<Title>" + titleString + "</Title>\n</Citation>\n";
						nonRelevantSetString = nonRelevantSetString + nonRelevantString;
				}
				nonRelevantSetString = nonRelevantSetString + "</NonrelevantCitations>\n";
				params["uploadString"] = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Citations>\n" + relevantSetString + nonRelevantSetString + "</Citations>\n";
				uploadRelevantDocuments.addEventListener("result",saveCallBack);
				// uploadRelevantDocuments.url="../servlet/RetrieveGraph?uploadString="+relevantSetString;
				uploadRelevantDocuments.url="../servlet/RetrieveGraph";
				uploadRelevantDocuments.method = "POST";
				uploadRelevantDocuments.send(params);
			}

			private function saveCallBack(event:ResultEvent):void {
    			import flash.system.Security;
    			var urlstring:String = String(event.result);
    			if (urlstring == null) {
					noResults();
					return}
				Security.allowDomain("*");
				trace(urlstring);
    			myfile = new FileReference();
    			configureListeners(myfile);
    			var downloadURL:URLRequest;
        		var fileName:String = "relevant.xml";
    			downloadURL = new URLRequest();
            	downloadURL.url = urlstring;
            	myfile.download(downloadURL, fileName);
			 }

			 private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name);
        }



		]]>
	</mx:Script>


	<mx:Resize id="resize" />
	<!-- effectEnd="enterFirstState()"  -->

	<mx:Move id="moveEffect" target="{myGraph}" />

	<mx:VBox x="10" y="10" width="100%" height="100%" id="mainBox">
		<mx:HBox x="10" y="10" width="100%" height="90%">
			<mx:VBox height="100%" width="80%" borderStyle="inset" cornerRadius="4"
				backgroundColor="#ffffff" mouseDown="dragWhole()" mouseUp="stopDragWhole()" mouseMove="dragIt(event)"
				mouseWheel="zoomIt(event)" clipContent="false" autoLayout="false" id="vbox1"
				resizeEffect="resize">
				<graph:GraphVisualizer width="100%" height="100%" id="myGraph" themeColor="#0000ff"/>

			</mx:VBox>
			<mx:Accordion width="18%" height="100%" id="accordion1">
				<mx:VBox label="Information" width="100%" height="100%" id="canvas1" backgroundColor="0xFAFAFF">
					<!-- <mx:HRule height="1" verticalCenter="-5" left="10" right="10"/>-->
					<mx:Label text="Concept Information"/>
					<mx:Canvas width="100%" height="45%" id="nodeInformation" alpha="1.0" visible="false" showEffect="fadeIn" hideEffect="fadeOut"
					           horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:Label left="10" y="36" text="CUI:"/>
						<mx:Label left="10" y="62" text="Sem. type:"/>
						<mx:Label right="10" y="62" text="Label" maxWidth="150" styleName="text" textAlign="right" id="semtypeLabel"/>
						<mx:Label right="10" y="36" text="Label" maxWidth="150" styleName="text" textAlign="right" id="cuiLabel"/>
						<mx:Label left="10" y="10" text="Concept:"/>
						<mx:Label right="10" y="10" text="Label" maxWidth="150" textAlign="right" id="conceptLabel"/>
						<mx:Label left="10" y="88" text="No. Predications:"/>
						<mx:Label y="88" text="Label" textAlign="right" left="127" right="10" id="nodePredicationLabel" />
						<mx:Label x="10" y="140" text="Label" id="umlsLink" visible="false"/>
						<mx:Label x="11" y="140" text="Label" id="ghrLink" visible="false"/>
						<mx:Label x="12" y="140" text="Label" id="omimLink" visible="false"/>
						<mx:Label x="13" y="140" text="Label" id="entrezLink" visible="false"/>
						<mx:Button label="UMLS" id="umlsButton" width="66" bottom="56" horizontalCenter="-34">
							<mx:click>navigateToURL(new URLRequest(umlsLink.text), '_blank')</mx:click>
						</mx:Button>
						<mx:Button label="GHR" id="ghrButton" horizontalCenter="34" width="68.5" bottom="56">
							<mx:click>navigateToURL(new URLRequest(ghrLink.text), '_blank')</mx:click>
						</mx:Button>
						<mx:Button label="OMIM" horizontalCenter="-34" id="omimButton" width="65" bottom="20">
							<mx:click>navigateToURL(new URLRequest(omimLink.text), '_blank')</mx:click>
						</mx:Button>
						<mx:Button horizontalCenter="34" label="ENTREZ" id="entrezButton" bottom="20">
							<mx:click>navigateToURL(new URLRequest(entrezLink.text), '_blank')</mx:click>
						</mx:Button>
					</mx:Canvas>
					<mx:Label text="Relationship Information"/>
					<mx:Canvas width="100%" height="45%" id="edgeInformation" alpha="1.0" visible="false" showEffect="fadeIn" hideEffect="fadeOut"
								horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:Label x="10" y="10" text="Subject:" id="sL" />
						<mx:Label y="10" text="Label" id="sourceLabel" maxWidth="150" textAlign="right" right="10"/>

						<mx:Label x="10" y="36" text="Relation:" id="label1"/>
						<mx:Label right="10" y="36" text="Label" maxWidth="150" textAlign="right" id="predicateLabel"/>

						<mx:Label x="10" y="62" text="Object:"/>
						<mx:Label y="62" text="Label" textAlign="right" maxWidth="150"  id="targetLabel" right="10"/>

						<mx:Label x="10" y="86" text="No. Predications:"/>
						<mx:Label y="86" text="Label" textAlign="right" width="100" id="predicationNumberLabel" right="10"/>

						<mx:Label x="10" y="110" text="No. Citations:"/>
						<mx:Label y="110" text="Label" textAlign="right" width="100" id="citationNumberLabel" right="10"/>


						<mx:Button label="Citations" bottom="25" horizontalCenter="0">
							<mx:click>
								<![CDATA[
									if (currentState=='relevant')
										showingRelevantCitation=true;
									retrieveCitations();
									if (currentState=='relevant')
										currentState='relevantCitation';
									else
										currentState='citation';
								]]>
							</mx:click>
						</mx:Button>
					</mx:Canvas>
					<!--


					-->
				</mx:VBox>
				<mx:VBox label="Filters" width="100%" height="100%" id="form1" paddingLeft="10" backgroundColor="0xFAFAFF">
				</mx:VBox>
				<mx:VBox label="Search" width="100%" height="100%" id="form2" paddingLeft="10" paddingRight="10" backgroundColor="0xFAFAFF">
					<mx:VBox width="100%" height="100%">
						<mx:Label text="Search for concept:"/>
						<mx:HBox width="100%">
							<mx:TextInput left="20" id="conceptSearch"/>
							<mx:Button label="Search" id="searchButton" click="searchConcept()"/>
						</mx:HBox>
						<mx:List dataProvider="{searchedConcepts}" width="100%" click="centerOnConcept()" id="searchList">
						</mx:List>
					</mx:VBox>
				</mx:VBox>
			</mx:Accordion>
		</mx:HBox>
		<mx:ApplicationControlBar height="40" width="98%" id="hbox1" fillColors="[#ffffff, #ffffff]" fillAlphas="[1.0, 1.0]">
			<mx:Label text="Layout:"/>
			<mx:ComboBox dataProvider="{layoutOptions}" id="layoutChoose"
			             close="myGraph.changeLayout(ComboBox(event.target).selectedItem.data,true)"
			             width="143" horizontalCenter="-431" verticalCenter="318.5" selectedIndex="1">
			</mx:ComboBox>
			<mx:Button icon="@Embed('img/ZoomIn28.png')" width="40" height="32" horizontalCenter="-331" verticalCenter="323.5">
				<mx:click>
				<![CDATA[
					var center:Point = getViewportCenter();
					Application.application.zoom*=2.0;
					myGraph.scaleX = Application.application.zoom;
					myGraph.scaleY = Application.application.zoom;

					moveToCenter(center.x,center.y);
				]]>
				</mx:click>
			</mx:Button>
			<mx:Button icon="@Embed('img/ZoomOut28.png')" height="32" horizontalCenter="-283" verticalCenter="323.5">
				<mx:click>
				<![CDATA[
					var center:Point = getViewportCenter();
					Application.application.zoom/=2.0;
					myGraph.scaleX = Application.application.zoom;
					myGraph.scaleY = Application.application.zoom;

					moveToCenter(center.x,center.y);
				]]>
				</mx:click>
			</mx:Button>
			<mx:Button id="stopButton" label="Stop" horizontalCenter="-143" verticalCenter="318.5">
				<mx:click>
					<![CDATA[
						if (stopButton.label=="Stop"){
							myGraph.stop();
							stopButton.label = "Restart";
						}else{
							myGraph.play();
							stopButton.label = "Stop";
						}
					]]>
				</mx:click>
			</mx:Button>
			<mx:Button label="List of Titles" id="relevantButton" toggle="true">
				<mx:click>
					<![CDATA[
						if (relevantButton.selected){
							//captureCenter()
							currentState='relevant';
						}else{
							myGraph.unglow();
							//captureCenter()
							currentState='';
						}
					]]>
				</mx:click>
			</mx:Button>
		</mx:ApplicationControlBar>
	</mx:VBox>
</mx:Application>

