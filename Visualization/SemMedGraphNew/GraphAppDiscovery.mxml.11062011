<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:fc="http://www.adobe.com/2006/fc"
	xmlns:graph="semmed.*"
    layout="absolute" creationComplete="startUp()" width="100%" xmlns:ns1="com.flashlit.shared.component.*" enterState="myGraph.unglow()">
	 <mx:states>
	 	 <!-- <mx:State name="citation">
	 	 	 <mx:AddChild position="last">
	 	 	 	 <mx:Canvas y="100" width="800" height="80%" horizontalCenter="0">
	 	 	 	 	 <mx:Panel x="0" y="0" width="100%" height="100%" layout="absolute" title="Citations"  addedEffect="{fadeIn}" removedEffect="{fadeOut}" showEffect="{fadeIn}" hideEffect="{fadeOut}">
	 	 	 	 	 	 <mx:Button label="Close" right="10" bottom="10" click="currentState=''"/>
	 	 	 	 	 	 <mx:VBox x="10" y="10" width="868" height="469" bottom="40" left="10" right="10" top="10" autoLayout="true" id="citationsVbox">


	 	 	 	 	 	 </mx:VBox>
	 	 	 	 	 </mx:Panel>
	 	 	 	 </mx:Canvas>
	 	 	 </mx:AddChild>
	 	 	 <mx:SetProperty target="{myGraph}" name="enabled" value="false"/>
	 	 </mx:State> -->
	 	 <mx:State name="relevant">
	 	 	 <mx:SetProperty target="{vbox1}" name="width" value="50%"/>
	 	 	 <mx:AddChild relativeTo="{accordion1}" position="before">
				 <mx:VBox width="30%" height="100%">
					 <mx:VDividedBox width="100%" height="100%">
						<mx:VBox width="100%" height="50%">
								 <mx:HBox width="50%">
								    <mx:RadioButton label="Relevant Citations" id="relevantRadio" selected="true" groupName="relevantNonRelevantGroup" click="filter(false);centerOnVisible();deselectAll()"/>
									<mx:Button label="Save To File" id="saveButton" click="saveFile()"/>
									</mx:HBox>
							     <mx:List  width="100%" height="100%"  dragEnabled="true" dropEnabled="true" allowMultipleSelection="true"
								dragMoveEnabled="true" id="relevantList" dataProvider="{relevants.citation}" updateComplete="filter(false);centerOnVisible()" horizontalScrollPolicy="on"
								doubleClickEnabled="true"  itemRenderer="TitleRenderer"></mx:List>
						 </mx:VBox>
						 <mx:VBox width="100%" height="50%">
							 <mx:RadioButton label="Non-Relevant Citations" id="nonRelevantRadio" groupName="relevantNonRelevantGroup" click="filter(false);centerOnVisible();deselectAll()"/>
							 <mx:List width="100%" height="100%" dragEnabled="true" dropEnabled="true"
								allowMultipleSelection="true"   updateComplete="filter(false);centerOnVisible()" dragMoveEnabled="true" id="nonRelevantList"
								dataProvider="{nonRelevants.citation}" creationComplete="addListener()" horizontalScrollPolicy="on" doubleClickEnabled="true"
								itemRenderer="TitleRenderer"></mx:List>
						 </mx:VBox>
					 </mx:VDividedBox>

					 <mx:RadioButton label="All Citations" id="allRadio" selected="false" groupName="relevantNonRelevantGroup"/>

				 </mx:VBox>
	 	 	 </mx:AddChild>
	 	 </mx:State>
		 <mx:State name="relevantCitation" basedOn="relevant">
	 	 	 <mx:AddChild position="lastChild">
	 	 	 	 <mx:Canvas y="100" width="800" height="80%" horizontalCenter="0">
	 	 	 	 	 <mx:Panel x="0" y="0" width="100%" height="100%" layout="absolute" title="Citations">
	 	 	 	 	 	 <mx:Button label="Close" right="10" bottom="10" click="currentState='graphd'"/>
	 	 	 	 	 	 <mx:VBox x="10" y="10" width="868" height="469" bottom="40" left="10" right="10" top="10" autoLayout="true" id="relevantCitationsVbox">

							 <!--
	 	 	 	 	 	 	 <mx:TextArea width="100%" height="100%" id="relevantCitationsText" wordWrap="true" editable="true" enabled="true"/>
							 -->
	 	 	 	 	 	 </mx:VBox>
	 	 	 	 	 </mx:Panel>
	 	 	 	 </mx:Canvas>
	 	 	 </mx:AddChild>
	 	 </mx:State>
	 	 <mx:State name="graphd">
	 	 	 <mx:SetProperty target="{myGraphd}" name="width" value="100%"/>
			 <mx:AddChild relativeTo="{accordion1}" position="before">
			  <!-- <mx:Move id="moveEffectd" target="{myGraphd}" /> -->
			  <mx:Canvas x = "0" y="0" width="1200%" height="100%" horizontalCenter="0">
			   <mx:Panel x="0" y="0" width="100%" height="100%" layout="absolute" title="Daughter Graph"  addedEffect="{fadeIn}" removedEffect="{fadeOut}" showEffect="{fadeIn}" hideEffect="{fadeOut}">

			 <mx:Button label="Close" right="10" bottom="10" click="clearDGraph();currentState=''"/>
			<mx:VBox x="10" y="10" width="100%" height="100%" id="mainBoxd">
			<mx:HBox x="10" y="10" width="100%" height="90%">
			<mx:VBox height="100%" width="80%" borderStyle="inset"
				backgroundColor="#ffffff" mouseDown="dragWhole()" mouseUp="stopDragWhole()" mouseMove="dragItd(event)"
				 mouseWheel="zoomItd(event)" clipContent="false" autoLayout="false" id="vbox1d"
				resizeEffect="resize">
				<graph:GraphVisualizer width="100%" height="100%" id="myGraphd" themeColor="#0000ff"/>

			</mx:VBox>
			<mx:Accordion width="18%" height="100%" id="accordion1d">
				<mx:VBox label="Information" width="100%" height="100%" id="canvas1d" backgroundColor="0xFAFAFF">
					<!-- <mx:HRule height="1" verticalCenter="-5" left="10" right="10"/>-->
					<mx:Label text="Concept Information"/>
					<mx:Canvas width="100%" height="45%" id="nodeInformationd" alpha="1.0" visible="false" showEffect="fadeIn" hideEffect="fadeOut"
					           horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:Label left="10" y="36" text="CUI:"/>
						<mx:Label left="10" y="62" text="Sem. type:"/>
						<mx:Label right="10" y="62" text="Label" maxWidth="150" styleName="text" textAlign="right" id="semtypeLabeld"/>
						<mx:Label right="10" y="36" text="Label" maxWidth="150" styleName="text" textAlign="right" id="cuiLabeld"/>
						<mx:Label left="10" y="10" text="Concept:"/>
						<mx:Label right="10" y="10" text="Label" maxWidth="100" textAlign="right" id="conceptLabeld"/>
						<mx:Label left="10" y="88" text="No. Predications:"/>
						<mx:Label y="88" text="Label" textAlign="right" left="127" right="10" id="nodePredicationLabeld" />
						<mx:Label x="10" y="140" text="Label" id="umlsLinkd" visible="false"/>
						<mx:Label x="11" y="140" text="Label" id="ghrLinkd" visible="false"/>
						<mx:Label x="12" y="140" text="Label" id="omimLinkd" visible="false"/>
						<mx:Label x="13" y="140" text="Label" id="entrezLinkd" visible="false"/>
						<mx:Button label="UMLS" id="umlsButtond" width="66" bottom="56" horizontalCenter="-34">
							<mx:click>navigateToURL(new URLRequest(umlsLink.text), '_blank')</mx:click>
						</mx:Button>
						<mx:Button label="GHR" id="ghrButtond" horizontalCenter="34" width="68.5" bottom="56">
							<mx:click>navigateToURL(new URLRequest(ghrLink.text), '_blank')</mx:click>
						</mx:Button>
						<mx:Button label="OMIM" horizontalCenter="-34" id="omimButtond" width="65" bottom="20">
							<mx:click>navigateToURL(new URLRequest(omimLink.text), '_blank')</mx:click>
						</mx:Button>
						<mx:Button horizontalCenter="34" label="ENTREZ" id="entrezButtond" bottom="20">
							<mx:click>navigateToURL(new URLRequest(entrezLink.text), '_blank')</mx:click>
						</mx:Button>
					</mx:Canvas>
					<mx:Label text="Relationship Information"/>
					<mx:Canvas width="100%" height="45%" id="edgeInformationd" alpha="1.0" visible="false" showEffect="fadeIn" hideEffect="fadeOut"
								horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:Label x="10" y="10" text="Subject:" id="sLd" />
						<mx:Label y="10" text="Label" id="sourceLabeld" maxWidth="100" textAlign="right" right="10"/>

						<mx:Label x="10" y="36" text="Relation:" id="label1d"/>
						<mx:Label right="10" y="36" text="Label" maxWidth="150" textAlign="right" id="predicateLabeld"/>

						<mx:Label x="10" y="62" text="Object:"/>
						<mx:Label y="62" text="Label" textAlign="right" maxWidth="100"  id="targetLabeld" right="10"/>

						<mx:Label x="10" y="86" text="No. Predications:"/>
						<mx:Label y="86" text="Label" textAlign="right" width="100" id="predicationNumberLabeld" right="10"/>

						<mx:Label x="10" y="110" text="No. Citations:"/>
						<mx:Label y="110" text="Label" textAlign="right" width="100" id="citationNumberLabeld" right="10"/>


						<mx:Button label="Citations" bottom="25" horizontalCenter="0">
							<mx:click>
								<![CDATA[
									if (currentState=='relevant')
										showingRelevantCitation=true;
									retrieveCitations();
									if (currentState=='relevant')
										currentState='relevantCitation';
									else
										currentState='citation';
								]]>
							</mx:click>
						</mx:Button>
					</mx:Canvas>
					<!--


					-->
				</mx:VBox>
				<mx:VBox label="Relation Labels" width="100%" height="100%" id="form1d" paddingLeft="10" backgroundColor="0xFAFAFF">
				</mx:VBox>
				<mx:VBox label="Search" width="100%" height="100%" id="form2d" paddingLeft="10" paddingRight="10" backgroundColor="0xFAFAFF">
					<mx:VBox width="100%" height="100%">
						<mx:Label text="Search for concept:"/>
						<mx:HBox width="100%">
							<mx:TextInput left="20" id="conceptSearchd"/>
							<mx:Button label="Search" id="searchButtond" click="searchConcept()"/>
						</mx:HBox>
						<mx:List dataProvider="{searchedConcepts}" width="100%" click="centerOnConcept()" id="searchListd">
						</mx:List>
					</mx:VBox>
				</mx:VBox>
			</mx:Accordion>
		</mx:HBox>
		<mx:ApplicationControlBar height="40" width="98%" id="hbox1d" fillColors="[#ffffff, #ffffff]" fillAlphas="[1.0, 1.0]">
			<mx:Label text="Layout:"/>
			<mx:ComboBox dataProvider="{layoutOptions}" id="layoutChoosed"
			             close="myGraphd.changeLayout(ComboBox(event.target).selectedItem.data,true)"
			             width="143" horizontalCenter="-431" verticalCenter="318.5" selectedIndex="1">
			</mx:ComboBox>
			<mx:Button icon="@Embed('img/ZoomIn28.png')" width="40" height="32" horizontalCenter="-331" verticalCenter="323.5">
				<mx:click>
				<![CDATA[
					var center:Point = getViewportCenter();
					Application.application.zoom*=2.0;
					myGraphd.scaleX = Application.application.zoom;
					myGraphd.scaleY = Application.application.zoom;

					moveToCenter(center.x,center.y);
					// myGraph.zoom(zoom);
				]]>
				</mx:click>
			</mx:Button>
			<mx:Button icon="@Embed('img/ZoomOut28.png')" height="32" horizontalCenter="-283" verticalCenter="323.5">
				<mx:click>
				<![CDATA[
					var center:Point = getViewportCenter();
					Application.application.zoom/=2.0;
					myGraphd.scaleX = Application.application.zoom;
					myGraphd.scaleY = Application.application.zoom;

					moveToCenter(center.x,center.y);
					// myGraph.zoom(zoom);
				]]>
				</mx:click>
			</mx:Button>
			<mx:Button label="Close" width="60" height="32" click="currentState=''"/>
			</mx:ApplicationControlBar>
			</mx:VBox>
				 	 	 	 </mx:Panel>
			</mx:Canvas>
		  </mx:AddChild>
	 	</mx:State>
		<mx:State name="citation" basedOn="graphd">
	 	 	 <mx:AddChild position="last">
	 	 	 	 <mx:Canvas y="100" width="800" height="80%" horizontalCenter="0">
	 	 	 	 	 <mx:Panel x="0" y="0" width="100%" height="100%" layout="absolute" title="Citations"  addedEffect="{fadeIn}" removedEffect="{fadeOut}" showEffect="{fadeIn}" hideEffect="{fadeOut}">
	 	 	 	 	 	 <mx:Button label="Close" right="10" bottom="10" click="currentState='graphd'"/>
	 	 	 	 	 	 <mx:VBox x="10" y="10" width="868" height="469" bottom="40" left="10" right="10" top="10" autoLayout="true" id="citationsVbox">


	 	 	 	 	 	 </mx:VBox>
	 	 	 	 	 </mx:Panel>
	 	 	 	 </mx:Canvas>
	 	 	 </mx:AddChild>
	 	 	 <mx:SetProperty target="{myGraph}" name="enabled" value="false"/>
	 	 </mx:State>
		 <mx:State name="no_results">
			 <mx:RemoveChild target="{mainBox}"/>
			 <mx:AddChild position="lastChild">
				 <mx:Panel x="0" y="0" height="100%" width="100%" title="Error">
					 <mx:Label text="There seems to be no data to visualize. Please press the 'Visualize' button." x="20" y="20"/>
				 </mx:Panel>
			 </mx:AddChild>
		 </mx:State>
	 </mx:states>
	 <mx:Style>
        .text {
            color: #222222;
            font-family: Verdana;
        }
    </mx:Style>


	<mx:Fade id="fadeOut" duration="1000" alphaFrom="1.0" alphaTo="0.0"/>
    <mx:Fade id="fadeIn" duration="1000" alphaFrom="0.0" alphaTo="1.0"/>


    <mx:HTTPService id="service"/>
    <mx:HTTPService id="relevantDocuments"/>
	<mx:HTTPService id="citations"/>
	<mx:HTTPService id="getDGraph"/>

	<mx:Script>
		<![CDATA[
			import flare.animate.interpolate.PointInterpolator;
			import mx.collections.ListCollectionView;
			import mx.collections.ArrayCollection;
			import mx.controls.HRule;
			import mx.controls.CheckBox;
			import mx.controls.Menu;
			import flare.vis.data.EdgeSprite;
			import flare.vis.data.NodeSprite;
			import mx.controls.TextArea;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.controls.Alert;
			import flash.external.ExternalInterface;

			import semmed.NodeData;
			import semmed.GraphVisualizer;
			import semmed.EdgeRenderer;
			import semmed.NodeRenderer;
			import semmed.SeedNodeRenderer;
			// import flare.vis.data.render.ShapeRenderer;
			import flare.util.Sort;
			import flare.vis.util.Shapes;

			import mx.rpc.events.ResultEvent;
			import flash.events.MouseEvent;
			import flash.geom.Point;
			import mx.events.MenuEvent;
			// import flash.filesystem.*;
			import flash.text.TextField;
			import flash.ui.ContextMenu;
			import flash.ui.ContextMenuItem;
			import flash.utils.Dictionary;

    		public  var myfile:FileReference;
    		public  var saveFileRef:FileReference;

			public var draggingWhole:Boolean = false;
			public var draggingLittle:Boolean = false;

			[Bindable]
            public var mnodeList:Array = new Array();

			[Bindable]
			public var zoom:Number=1.0;

			[Bindable]
            public var layoutOptions: Array = [
	           {label:"Spring", data:0},
			   {label:"Node-Link Tree", data:1},
			   {label:"Circle", data:2 },
			   {label:"Radial",data:3},
			   {label:"Fixed",data:4}];

			[Bindable]
			public var linkOptions: Array = [
				{label:"UMLS"},
				{label:"EntrezGene"},
				{label:"OMIM"},
				{label:"GHR"}];

            private var selectedCitations :String;
            private var selectedCitationsd :String;

            private var selectedText :Array;

            private var currentPos:Object = {x:0,y:0};
            private var currentPosd:Object = {x:0,y:0};

            private var predicates:Array;
            private var predicatesd:Array;

            private var semTypes:Array;
            private var semTypesd:Array;

            private var predicateFilters:Array;
            private var predicateFiltersd:Array;

			private var semtypeFilters:Array;

            private var seed:Object;

            private var xmlInput:Object;

			private var alreadyRendered:String;
			private var oldCenter:Point;

			private var firstTime=true;

			private var showingRelevantCitation:Boolean;

			private var conceptDict:Dictionary = new Dictionary();

            [Bindable]
            public var relevants:Object;

            [Bindable]
            public var nonRelevants:Object;

			[Bindable]
			public var searchedConcepts:Array;

			public function startUp():void
			{
				service.addEventListener("result",infoCallback);
				service.url="../servlet/RetrieveGraph?key="+Application.application.parameters.graphKey;
				service.send();

				relevantDocuments.addEventListener(ResultEvent.RESULT,resultsCallback);
				relevantDocuments.url="../servlet/RetrieveGraph?doc=t&key="+Application.application.parameters.graphKey;
                relevantDocuments.send();



                //relevantDocuments.send();
                var myMenu:ContextMenu = new ContextMenu();
				myMenu.hideBuiltInItems();

				var saveCompleteGraphMenu:ContextMenuItem = new ContextMenuItem("save complete graph in XML");
				var saveVisibleGraphMenu:ContextMenuItem = new ContextMenuItem("save visible graph in XML");
				var saveCompleteTextMenu:ContextMenuItem = new ContextMenuItem("save complete graph in text");
				var saveVisibleTextMenu:ContextMenuItem = new ContextMenuItem("save visible graph in text");
				var saveCompleteDGraphMenu:ContextMenuItem = new ContextMenuItem("save complete Daughter graph in XML");
				saveCompleteGraphMenu.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, saveCompleteGraph);
				saveVisibleGraphMenu.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, saveVisibleGraph);
				saveCompleteTextMenu.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, saveCompleteText);
				saveVisibleTextMenu.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, saveVisibleText);
				saveCompleteDGraphMenu.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, saveCompleteDGraph);
				myMenu.customItems.push(saveCompleteGraphMenu);
				myMenu.customItems.push(saveVisibleGraphMenu);
				myMenu.customItems.push(saveCompleteTextMenu);
				myMenu.customItems.push(saveVisibleTextMenu);
				myMenu.customItems.push(saveCompleteDGraphMenu);
				this.contextMenu = myMenu;
			}

			// public function retrieveTitles():void
			// {
				// import mx.rpc.http.HTTPService;
				// var relevantDocuments:mx.rpc.http.HTTPService = new mx.rpc.http.HTTPService();
				// relevantDocuments.addEventListener(ResultEvent.RESULT,retrieveTitleCallback);
				// relevantDocuments.url="../servlet/RetrieveGraph?doc=t&key="+Application.application.parameters.graphKey;
                // relevantDocuments.send();
			// }

			public function saveCompleteGraph(event:ContextMenuEvent):void {
        		import mx.rpc.http.HTTPService;
        		var uploadRelevantDocuments:mx.rpc.http.HTTPService = new mx.rpc.http.HTTPService();
        		var nodeString:String = null;
        		var edgeString:String = null;
        		var graphString:String = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<graph alreadyRendered=\"yes\">\n";
				var titleString:String;
				var pmidString:String;
				var params:Object = {};
				graphString = graphString + "<graphPosition x=\"" + myGraph.x + "\" y=\"" + myGraph.y + "\" />\n";
				graphString = graphString + "<graphZoom x=\"" + myGraph.scaleX + "\" y=\"" + myGraph.scaleY + "\" />\n";
				graphString = graphString + "<relationFilters>\n";
				for each (var c:CheckBox in predicateFilters) {
	            	if (c.selected)
	            		graphString = graphString + "<relation id=\"\">" + c.label + "</relation>\n";
				}
				graphString = graphString + "</relationFilters>\n";
				for each (var n:NodeSprite in myGraph.dataF.nodes){
						var newx:int = n.x;
						var newy:int = n.y;
						nodeString = "<node id=\"" + n.data.CUI + "\" name=\"" + escapeHTML(n.data.name, null) + "\" semtype=\"" + n.data.semtype + "\" visible=\"" + n.visible  + "\" color=\"" + intToHex(n.trueFillColor) + "\" x=\"" + newx + "\" y = \"" + newy + "\"";
						if(n.data.umlks)
							nodeString = nodeString + " umlsks_url=\"" + escapeHTML(n.data.umlks, null) + "\"";
						if(n.data.ghr)
							nodeString = nodeString + " ghr_url=\"" + escapeHTML(n.data.ghr, null) + "\"";
						if(n.data.omim)
							nodeString = nodeString + " omim_url=\"" + escapeHTML(n.data.omim, null) + "\"";
						if(n.data.entrez)
							nodeString = nodeString + " entrezgene_url=\"" + escapeHTML(n.data.entrez, null) + "\"/>\n";
						else
							nodeString = nodeString + "/>\n";
						graphString = graphString + nodeString;
				}


				for each (var e:EdgeSprite in myGraph.allEdges){
							var edgeVisible:Boolean = false;
							for each (var c:CheckBox in predicateFilters) {
	            				if (c.selected == true && c.label == e.data.predicate) {
	            					edgeVisible = true;
	            					break;
	            				}
							}
							if(edgeVisible == false)
								edgeString = "<edge source=\"" + e.data.subjectCUI + "\" target=\"" + e.data.targetCUI + "\" label=\"" + e.data.predicate + "\" color=\"" + intToHex(e.fillColor) +  "\" visible = \"false\" >";
							else
								edgeString = "<edge source=\"" + e.data.subjectCUI + "\" target=\"" + e.data.targetCUI + "\" label=\"" + e.data.predicate + "\" color=\"" + intToHex(e.fillColor) + "\" >";
							var citations:Array = e.data.citation.split(",");
							var citnum:Number = 0;
							for each (var s:String in e.data.sentences) {
								edgeString = edgeString + "<sentence id = \"" + citations[citnum] + ".ab.n\" text = \"" + regexp(escapeHTML(s, null)) + "\"/>";
								citnum = citnum+1;
							}
							edgeString = edgeString + "</edge>\n";
							// graphString = graphString + edgeString;
							graphString = graphString + edgeString;
				}

				graphString = graphString + "\n<degreeList>\n";
				for each(var nodeInfo:String in mnodeList) {
				   // graphString = graphString + "\n<node name=\"" + nodeInfo.name + "\" type=\"" + nodeInfo.type + "\" connectivity=\"" + nodeInfo.connectivity + "\" />";
				   graphString = graphString + "\n<node name=\"" + nodeInfo + "\" />\n";
				}
				graphString = graphString + "\n</degreeList>\n";
				graphString = graphString + "\n<seed value=\"" + seed.name + "\"/>\n</graph>";
				// params["uploadString"] =  graphString + "\n</graph>";
				// uploadRelevantDocuments.addEventListener(MouseEvent.CLICK,saveGraphCallBack);
				// uploadRelevantDocuments.url="../servlet/RetrieveGraph";
				// uploadRelevantDocuments.method = "POST";
				// uploadRelevantDocuments.send(params);
				var fileName:String = "graph.xml";
				saveFileRef = new FileReference();
				saveFileRef.addEventListener(Event.SELECT, onSaveFileSelected);
				saveFileRef.save(graphString,fileName);
			}

			public function saveCompleteDGraph(event:ContextMenuEvent):void {
        		import mx.rpc.http.HTTPService;
        		var uploadRelevantDocuments:mx.rpc.http.HTTPService = new mx.rpc.http.HTTPService();
        		var nodeString:String = null;
        		var edgeString:String = null;
        		var graphString:String = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<graph alreadyRendered=\"yes\">\n";
				var titleString:String;
				var pmidString:String;
				var params:Object = {};
				graphString = graphString + "<graphPosition x=\"" + myGraphd.x + "\" y=\"" + myGraphd.y + "\" />\n";
				graphString = graphString + "<graphZoom x=\"" + myGraphd.scaleX + "\" y=\"" + myGraphd.scaleY + "\" />\n";
				graphString = graphString + "<relationFilters>\n";
				for each (var c:CheckBox in predicateFiltersd) {
	            	if (c.selected)
	            		graphString = graphString + "<relation id=\"\">" + c.label + "</relation>\n";
				}
				graphString = graphString + "</relationFilters>\n";
				for each (var n:NodeSprite in myGraphd.dataF.nodes){
						var newx:int = n.x;
						var newy:int = n.y;
						nodeString = "<node id=\"" + n.data.CUI + "\" name=\"" + escapeHTML(n.data.name, null) + "\" semtype=\"" + n.data.semtype + "\" visible=\"true"  + "\" color=\"" + intToHex(n.trueFillColor) + "\" x=\"" + newx + "\" y = \"" + newy + "\"";
						if(n.data.umlks)
							nodeString = nodeString + " umlsks_url=\"" + escapeHTML(n.data.umlks, null) + "\"";
						if(n.data.ghr)
							nodeString = nodeString + " ghr_url=\"" + escapeHTML(n.data.ghr, null) + "\"";
						if(n.data.omim)
							nodeString = nodeString + " omim_url=\"" + escapeHTML(n.data.omim, null) + "\"";
						if(n.data.entrez)
							nodeString = nodeString + " entrezgene_url=\"" + escapeHTML(n.data.entrez, null) + "\"/>\n";
						else
							nodeString = nodeString + "/>\n";
						graphString = graphString + nodeString;
				}


				for each (var e:EdgeSprite in myGraphd.allEdges){
							var edgeVisible:Boolean = false;
							for each (var c:CheckBox in predicateFilters) {
	            				if (c.selected == true && c.label == e.data.predicate) {
	            					edgeVisible = true;
	            					break;
	            				}
							}
							// if(edgeVisible == false)
							//	edgeString = "<edge source=\"" + e.data.subjectCUI + "\" target=\"" + e.data.targetCUI + "\" label=\"" + e.data.predicate + "\" color=\"" + intToHex(e.fillColor) +  "\" visible = \"false\" >";
							// else
								edgeString = "<edge source=\"" + e.data.subjectCUI + "\" target=\"" + e.data.targetCUI + "\" label=\"" + e.data.predicate + "\" color=\"" + intToHex(e.fillColor) + "\" >";
							var citations:Array = e.data.citation.split(",");
							var citnum:Number = 0;
							for each (var s:String in e.data.sentences) {
								edgeString = edgeString + "<sentence id = \"" + citations[citnum] + ".ab.n\" text = \"" + regexp(escapeHTML(s, null)) + "\"/>";
								citnum = citnum+1;
							}
							edgeString = edgeString + "</edge>\n";
							// graphString = graphString + edgeString;
							graphString = graphString + edgeString;
				}

				graphString = graphString + "\n<seed value=\"" + seed.name + "\"/>\n</graph>";
				// params["uploadString"] =  graphString + "\n</graph>";
				// uploadRelevantDocuments.addEventListener(MouseEvent.CLICK,saveGraphCallBack);
				// uploadRelevantDocuments.url="../servlet/RetrieveGraph";
				// uploadRelevantDocuments.method = "POST";
				// uploadRelevantDocuments.send(params);
				var fileName:String = "daughterGraph.xml";
				saveFileRef = new FileReference();
				saveFileRef.addEventListener(Event.SELECT, onSaveFileSelected);
				saveFileRef.save(graphString,fileName);
			}


			public function saveVisibleGraph(event:ContextMenuEvent):void {
        		import mx.rpc.http.HTTPService;
        		var uploadRelevantDocuments:mx.rpc.http.HTTPService = new mx.rpc.http.HTTPService();
        		var nodeString:String = null;
        		var edgeString:String = null;
        		var graphString:String = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<graph alreadyRendered=\"yes\">\n";
				var titleString:String;
				var pmidString:String;
				var params:Object = {};
				graphString = graphString + "<graphPosition x=\"" + myGraph.x + "\" y=\"" + myGraph.y + "\" />\n";
				graphString = graphString + "<graphZoom x=\"" + myGraph.scaleX + "\" y=\"" + myGraph.scaleY + "\" />\n";
				graphString = graphString + "<relationFilters>\n";
				for each (var c:CheckBox in predicateFilters) {
	            	if (c.selected)
	            		graphString = graphString + "<relation id=\"\">" + c.label + "</relation>\n";
				}
				graphString = graphString + "</relationFilters>\n";
				for each (var n:NodeSprite in myGraph.dataF.nodes){
					if(n.visible == true) {
						var newx:int = n.x;
						var newy:int = n.y;
						nodeString = "<node id=\"" + n.data.CUI + "\" name=\"" + escapeHTML(n.data.name, null) + "\" semtype=\"" + n.data.semtype + "\" color=\"" + intToHex(n.trueFillColor) + "\" x=\"" + newx + "\" y = \"" + newy + "\"";
						if(n.data.umlks)
							nodeString = nodeString + " umlsks_url=\"" + escapeHTML(n.data.umlks, null) + "\"";
						if(n.data.ghr)
							nodeString = nodeString + " ghr_url=\"" + escapeHTML(n.data.ghr, null) + "\"";
						if(n.data.omim)
							nodeString = nodeString + " omim_url=\"" + escapeHTML(n.data.omim, null) + "\"";
						if(n.data.entrez)
							nodeString = nodeString + " entrezgene_url=\"" + escapeHTML(n.data.entrez, null) + "\"/>\n";
						else
							nodeString = nodeString + "/>\n";
						graphString = graphString + nodeString;
					}
				}


				for each (var e:EdgeSprite in myGraph.dataF.edges){
							var edgeVisible:Boolean = false;
							for each (var c:CheckBox in predicateFilters) {
	            				if (c.selected == true && c.label == e.data.predicate) {
	            					edgeVisible = true;
	            					break;
	            				}
							}
							edgeString = "<edge source=\"" + e.data.subjectCUI + "\" target=\"" + e.data.targetCUI + "\" label=\"" + e.data.predicate + "\" color=\"" + intToHex(e.fillColor) + "\" >";
							var citations:Array = e.data.citation.split(",");
							var citnum:Number = 0;
							for each (var s:String in e.data.sentences) {
								edgeString = edgeString + "<sentence id = \"" + citations[citnum] + ".ab.n\" text = \"" + regexp(escapeHTML(s, null)) + "\"/>";
								citnum = citnum+1;
							}
							edgeString = edgeString + "</edge>\n";
							// graphString = graphString + edgeString;
							graphString = graphString + edgeString;
				}
				graphString = graphString + "\n<seed value=\"" + seed.name + "\"/>\n</graph>";
				// params["uploadString"] =  graphString + "\n</graph>";
				// uploadRelevantDocuments.addEventListener("result",saveGraphCallBack);
				// uploadRelevantDocuments.url="../servlet/RetrieveGraph";
				// uploadRelevantDocuments.method = "POST";
				// uploadRelevantDocuments.send(params);
				var fileName:String = "graph.xml";
				saveFileRef = new FileReference();
				saveFileRef.addEventListener(Event.SELECT, onSaveFileSelected);
				saveFileRef.save(graphString,fileName);
			}

			public function saveCompleteText(event:ContextMenuEvent):void {
        		var nodeString:String = null;
        		var edgeString:String = null;
        		var textString:String = "";
				var titleString:String;

				for each (var e:EdgeSprite in myGraph.allEdges){
					var subjectType:String = conceptDict[e.data.subjectCUI];
					var targetType:String = conceptDict[e.data.targetCUI];
					var citations:Array = e.data.citation.split(",");
					var citnum:Number = 0;
					for each (var s:String in e.data.sentences) {
						var edgeString:String = citations[citnum] + "|" + e.data.subject + "|" + subjectType + "|" + e.data.predicate + "|" + e.data.target + "|" + targetType;
						var wholeString:String = edgeString + "|" + regexp(escapeHTML(s, null)) + "\n";
						textString = textString + wholeString;
						citnum++;
					}
				}
				var fileName:String = "graph.txt";
				saveFileRef = new FileReference();
				saveFileRef.addEventListener(Event.SELECT, onSaveFileSelected);
				saveFileRef.save(textString,fileName);
			}

			public function saveVisibleText(event:ContextMenuEvent):void {
        		var textString:String = "";
				for each (var e:EdgeSprite in myGraph.allEdges){
					var edgeVisible:Boolean = false;
					for each (var c:CheckBox in predicateFilters) {
	            		if (c.selected == true && c.label == e.data.predicate) {
	            			edgeVisible = true;
	            			break;
	            		}
					}
					if(edgeVisible) {
						var subjectType:String = conceptDict[e.data.subjectCUI];
						var targetType:String = conceptDict[e.data.targetCUI];
						var citations:Array = e.data.citation.split(",");
					    var citnum:Number = 0;
						for each (var s:String in e.data.sentences) {
							var edgeString2:String = citations[citnum] + "|" + e.data.subject + "|" + subjectType + "|" + e.data.predicate + "|" + e.data.target + "|" + targetType;
							var wholeString2:String = edgeString2 + "|" + regexp(escapeHTML(s, null)) + "\n";
							textString = textString + wholeString2;
							citnum++;
						}
					}
				}

				var fileName:String = "graph.txt";
				saveFileRef = new FileReference();
				saveFileRef.addEventListener(Event.SELECT, onSaveFileSelected);
				saveFileRef.save(textString,fileName);
			}

			private function saveGraphCallBack(event:ResultEvent):void {
    			import flash.system.Security;
    			var urlstring:String = String(event.result);
    			if (urlstring == null) {
					noResults();
					return}
				Security.allowDomain("*");
				trace(urlstring);
    			myfile = new FileReference();
    			configureListeners(myfile);
    			var downloadURL:URLRequest;
        		var fileName:String = "graph.xml";
    			downloadURL = new URLRequest();
            	downloadURL.url = urlstring;
            	myfile.download(downloadURL, fileName);
			 }

			private function nodeClick(evt:MouseEvent):void{

			}

			//interprets lists of relevant and nonrelevant citations
			private function resultsCallback(event:ResultEvent):void {

				relevants = event.result.citations.relevants;
				nonRelevants = 	event.result.citations.nonrelevants;

				// Commented out for SemMed visulization since they don't have relevant/nonrelevant title list
				/* if (!relevants && !nonRelevants)
					relevantButton.enabled = false;

				if (relevants==null)
					relevants = new Object();
				if (nonRelevants==null)
					nonRelevants = new Object(); */
			}

			//interprets graph xml
			private function infoCallback(event:ResultEvent) : void{

            	var xml:Object = event.result;
            	xmlInput = event.result;

				if (xml == null) {
					noResults();
					return;
				}else if (xml.graph==null) {
					noResults();
					return;
				}
				if(xml.graph.hasOwnProperty("alreadyRendered"))
					alreadyRendered = "yes";
				else
					alreadyRendered = "no";
				seed = {name:xml.graph.seed.value,node:null};

				semTypes = new Array();

				if (xml.graph.node.hasOwnProperty("id"))
	            	loadNode(xml.graph.node,semTypes);
				else
	   				for each(var node:Object in xml.graph.node)
	            		loadNode(node,semTypes);

	            predicates = new Array();

				var visibility:String;
          	    if (xml.graph.edge.hasOwnProperty("target")) {
          	    	if(xml.graph.edge.hasOwnProperty("visible"))
          	    		visibility = "invisible";
          	    	else
          	    		visibility = "visible";
          	    	 loadEdge(xml.graph.edge, predicates, visibility);
          	    } else
          	    	for each(var edge:Object in xml.graph.edge) {
          	    		if(edge.hasOwnProperty("visible"))
          	    			visibility = "invisible";
          	    		 else
          	    			visibility = "visible";
          	    		loadEdge(edge, predicates, visibility);
          	    	}

	            var h:HRule = new HRule;
	            var label:Label = new Label;
 				var savedRelationFilters:Array = new Array();
				if(alreadyRendered == "yes") {
					if(xml.graph.relationFilters.relation.hasOwnProperty("id"))
						savedRelationFilters.push(xml.graph.relationFilters.relation);
					else
						for each(var rel:String in xml.graph.relationFilters.relation) {
							savedRelationFilters.push(rel);
						}
				}

	            label.text = "Relations";
	            form1.addChild(label);
	            form1.addChild(h);

	            predicateFilters = new Array();
	            for(var k:int=0;k<predicates.length;k++){
	            	var cb:CheckBox = new CheckBox();
	            	filters.push(cb);
	            	if(alreadyRendered == "yes") {
	            		var relationFound:Boolean = false;
	            		for each(var rel:String in savedRelationFilters) {
	            			if(predicates[k].label == rel) {
	            				relationFound = true;
	            				break;
	            			}
	            		}
	            		if(relationFound == true)
	            			cb.selected = true;
	            		else
	            			cb.selected = false;
	            	} else
	            		cb.selected = true;

	            	cb.label = predicates[k].label;
	            	cb.setStyle("color", predicates[k].color);
					cb.setStyle("fillColors", [predicates[k].color, 0xAAAAAA]);
					cb.setStyle("fillAlphas", [1, 1]);
	            	form1.addChild(cb);
	            	predicateFilters.push(cb);
	            	cb.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
	            		filter();
	            	});
	            }

	            form1.addChild(new HRule());
	            // label = new Label();
	            //  label.text = "Semantic Types";
	            // form1.addChild(label);
	            // form1.addChild(new HRule());

				semtypeFilters = new Array();
	           	/* for each(var sem:Object in semTypes){
	           		var cb2:CheckBox = new CheckBox();
	           		cb2.label = sem.semtype;
	           		cb2.setStyle("color", sem.color);
					cb2.setStyle("alpha", 1);
					cb2.setStyle("fillColors",[sem.color, sem.color]);
					cb2.setStyle("fillAlphas", [1, 1]);
					cb2.selected = true;
					//cb2.enabled = false;
					semtypeFilters.push(cb2);
	           		form1.addChild(cb2);
					cb2.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
	            		filter();
	            	});
	           	} */

				for each(var node2:NodeSprite in myGraph.dataF.nodes)
					if (node2.data.name == seed.name) {
						seed.node = node2;
						break;
					}

				myGraph.dataF.sort("fillColor", 2);
				myGraph.loadData(alreadyRendered);
				if(alreadyRendered == "yes") {
					layoutChoose.selectedIndex = 4;
				}
//				if (seed.node)
//					trace("Your seed is " + seed.node.data.name);
				myGraph.setRoot(seed.node);

          	    for each(var n:Object in xml.graph.degreeList.node){
          	       mnodeList.push(n.name);
          	    }

	            myGraph.play();

				 if(alreadyRendered =="no")
					centerOnConcept(seed.node);
				 else if(xml.graph.hasOwnProperty("graphPosition")) {
				 	myGraph.x = xml.graph.graphPosition.x;
				 	myGraph.y = xml.graph.graphPosition.y;
				 	myGraph.scaleX = xml.graph.graphZoom.x;
				 	myGraph.scaleY = xml.graph.graphZoom.y;
				 }
				myGraph.redraw();

            }

			private function enterFirstState():void {
			    centerOnConcept(seed.node);
				if (oldCenter)
					moveToCenter(oldCenter.x, oldCenter.y,true);
			}

			private function centerOnVisible():void {
				//if (!firstTime)
				//	return;
				if (seed.node && seed.node.visible) {
					var n:NodeSprite = seed.node as NodeSprite;
					trace("I'm centering on root");
					moveToCenter(n.parent.x + n.x, n.parent.y + n.y, true);
				}else
					for each(var node:NodeSprite in myGraph.dataF.nodes)
						if (node.visible) {
							trace("I'm centering on something");
							moveToCenter(node.parent.x + node.x, node.parent.y + node.y, true);
							break;
						}
				firstTime = false;
			}

            private function dragIt(event:MouseEvent):void{
            	if (draggingWhole){
            		myGraph.x-=currentPos.x-event.stageX;
            		myGraph.y-=currentPos.y-event.stageY;
	            }
	            currentPos.x = event.stageX;
	            currentPos.y = event.stageY;
            }

           private function dragItd(event:MouseEvent):void{
            	if (draggingWhole){
            		myGraphd.x-=currentPosd.x-event.stageX;
            		myGraphd.y-=currentPosd.y-event.stageY;
	            }
	            currentPosd.x = event.stageX;
	            currentPosd.y = event.stageY;
            }

            private function zoomIt(event:MouseEvent):void {
				if (event.delta > 0) {
					var center:Point = getViewportCenter();
					zoom*=1.5;
					myGraph.scaleX = zoom;
					myGraph.scaleY = zoom;
					moveToCenter(center.x, center.y);
				}else if (event.delta < 0) {
					var center:Point = getViewportCenter();
					zoom/=1.5;
					myGraph.scaleX = zoom;
					myGraph.scaleY = zoom;
					moveToCenter(center.x, center.y);
				}
				// myGraph.zoom(zoom);

            }

            private function zoomItd(event:MouseEvent):void {
				if (event.delta > 0) {
					var center:Point = getViewportCenter();
					zoom*=1.5;
					myGraphd.scaleX = zoom;
					myGraphd.scaleY = zoom;
					moveToCenter(center.x, center.y);
				}else if (event.delta < 0) {
					var center:Point = getViewportCenter();
					zoom/=1.5;
					myGraphd.scaleX = zoom;
					myGraphd.scaleY = zoom;
					moveToCenter(center.x, center.y);
				}
				// myGraph.zoom(zoom);

            }


			private function hexToInt(s:String):uint{

				var val:uint=0;

				for(var i:int=0;i<s.length;i++){
					var c:String = s.charAt(i);

					val *= 16;
					if (c=='0')
						val+=0;
					else if (c=='1')
						val+=1;
					else if (c=='2')
						val+=2;
					else if (c=='3')
						val+=3;
					else if (c=='4')
						val+=4;
					else if (c=='5')
						val+=5;
					else if (c=='6')
						val+=6;
					else if (c=='7')
						val+=7;
					else if (c=='8')
						val+=8;
					else if (c=='9')
						val+=9;
					else if (c=='A')
						val+=10;
					else if (c=='B')
						val+=11;
					else if (c=='C')
						val+=12;
					else if (c=='D')
						val+=13;
					else if (c=='E')
						val+=14;
					else if (c=='F')
						val+=15;
				}

				return val;
			}

				private function intToHex(n:int):String{

				var temp:int=n;
				var nexttemp:int=n;
				var remain:int=n;
				var result:String = "";

				while(temp > 0){
					nexttemp = temp/16;
					remain = temp - nexttemp*16;
					var c:String;
					if (remain == 0)
						c="0";
					else if (remain == 1)
						c="1";
					else if (remain == 2)
						c="2";
					else if (remain == 3)
						c="3";
					else if (remain == 4)
						c="4";
					else if (remain == 5)
						c="5";
					else if (remain == 6)
						c="6";
					else if (remain == 7)
						c="7";
					else if (remain == 8)
						c="8";
					else if (remain == 9)
						c="9";
					else if (remain == 10)
						c="A";
					else if (remain == 11)
						c="B";
					else if (remain == 12)
						c="C";
					else if (remain == 13)
						c="D";
					else if (remain == 14)
						c="E";
					else if (remain == 15)
						c="F";

					if(result == "")
						result = c;
					else
						result = c + result;
					temp = nexttemp;
				}

				while(result.length < 6) {
					result = "0" + result;
				}
				result = "#" + result;
				return result;
			}


			private function initConceptMenu():void {
                //var myMenu:Menu = new Menu();
                //myMenu.dataProvider = linkOptions;
                //myMenu.addEventListener("itemClick", changeHandler);
                //conceptPopUp.popUp = myMenu;
            }

             private function changeHandler(event:MenuEvent):void {
                //var label:String = event.label;
                //conceptPopUp.label = label;
                //conceptPopUp.close();
            }


			private function retrieveCitation(event:MouseEvent):void {
				var id:String;
				if (event.target.parent.parent.parent.parent == nonRelevantList) {
					id = nonRelevantList.selectedItem.data;
					// selectedText = nonRelevantList.selectedItem.label;
				}else {
					id = relevantList.selectedItem.data;
					// selectedText = relevantList.selectedItem.label;
				}

				var url:String = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&retmode=xml&id="+id;

				url = escape(url);

//				if (relevantCitationsText && relevantCitationsText.text)
//					relevantCitationsText.text = "";
            	citations.addEventListener("result", citationCallback);
            	showingRelevantCitation = true;

				citations.url = "../servlet/RetrieveArticle?url=" + url;
                currentState = 'relevantCitation';
				citations.send();
			}

			private function retrieveRelevantCitation(event:MouseEvent):void {
				var id:String;
				id = relevantList.selectedItem.data;
				// selectedText = new Array();
				// selectedText.push(relevantList.selectedItem.label);

				var url:String = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&retmode=xml&id="+id;

				url = escape(url);

            	citations.addEventListener("result", citationCallback);
            	showingRelevantCitation = true;

				citations.url = "../servlet/RetrieveArticle?url=" + url;
                currentState = 'relevantCitation';
				citations.send();
			}

			private function retrieveNonrelevantCitation(event:MouseEvent):void {
				var id:String;
				id = nonRelevantList.selectedItem.data;
				// selectedText = new Array();
				// selectedText.push(nonRelevantList.selectedItem.label);

				var url:String = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&retmode=xml&id="+id;

				url = escape(url);

            	citations.addEventListener("result", citationCallback);
            	showingRelevantCitation = true;

				citations.url = "../servlet/RetrieveArticle?url=" + url;
                currentState = 'relevantCitation';
				citations.send();
			}

            private function retrieveCitations():void{
            	var ids:Array = selectedCitations.split(",");

            	var url:String = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&retmode=xml";

				var tempString:String;

				if (relevantRadio){
            		if (relevantRadio.selected) {
						for each(var ss:String in ids)
							for each(var cui:Object in relevantList.dataProvider) {
								tempString = new String(cui.data);
								if (tempString == ss){
									url = url + "&id=" + ss;
								}
							}
            		}else{
            			for each(var ss:String in ids)
							for each(var cui:Object in nonRelevantList.dataProvider) {
								tempString = new String(cui.data);
								if (tempString == ss)
									url = url + "&id=" + ss;

							}
					}
            	}else
					for each(var ss:String in ids)
						url = url + "&id=" + ss;

				url = escape(url);

//				if (citationsText && citationsText.text)
//					citationsText.text = "";
            	citations.addEventListener("result", citationCallback);


				citations.url = "../servlet/RetrieveArticle?url=" + url;

				citations.send();
            }

           private function retrieveCitationsd():void{
            	var ids:Array = selectedCitationsd.split(",");

            	var url:String = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&retmode=xml";

				var tempString:String;

				if (relevantRadio){
            		if (relevantRadio.selected) {
						for each(var ss:String in ids)
							for each(var cui:Object in relevantList.dataProvider) {
								tempString = new String(cui.data);
								if (tempString == ss){
									url = url + "&id=" + ss;
								}
							}
            		}else{
            			for each(var ss:String in ids)
							for each(var cui:Object in nonRelevantList.dataProvider) {
								tempString = new String(cui.data);
								if (tempString == ss)
									url = url + "&id=" + ss;

							}
					}
            	}else
					for each(var ss:String in ids)
						url = url + "&id=" + ss;

				url = escape(url);

//				if (citationsText && citationsText.text)
//					citationsText.text = "";
            	citations.addEventListener("result", citationCallback);


				citations.url = "../servlet/RetrieveArticle?url=" + url;

				citations.send();
            }

            private function citationCallback(event:ResultEvent) : void{
				var xml:Object = event.result;
				// var xml:XML = new XML(event.result);

				var textPanel:VBox;
				if (showingRelevantCitation){
					textPanel = relevantCitationsVbox;
					showingRelevantCitation = false;
				}else
					textPanel = citationsVbox;

				textPanel.removeAllChildren();

				var text:String = "";
				var totalS:String = "";
				if (xml.PubmedArticleSet.PubmedArticle.hasOwnProperty("MedlineCitation")){
					var pubDate:String = "<br><h2>Date of Publication: ";
					if(xml.PubmedArticleSet.PubmedArticle.MedlineCitation.Article.Journal.JournalIssue.PubDate.hasOwnProperty("Month")) {
						pubDate+=xml.PubmedArticleSet.PubmedArticle.MedlineCitation.Article.Journal.JournalIssue.PubDate.Month + " ";
						// pubDate+=xml.PubmedArticleSet.PubmedArticle.MedlineCitation.Article.Journal.JournalIssue.PubDate.Day + " ";
						pubDate+=xml.PubmedArticleSet.PubmedArticle.MedlineCitation.Article.Journal.JournalIssue.PubDate.Year + "</h2>";
					} else if(xml.PubmedArticleSet.PubmedArticle.MedlineCitation.Article.Journal.JournalIssue.PubDate.hasOwnProperty("MedlineDate")) {
						pubDate+=xml.PubmedArticleSet.PubmedArticle.MedlineCitation.Article.Journal.JournalIssue.PubDate.MedlineDate + "</h2>";
					}
					totalS= " <h1>PMID:<a target=\"_blank\" href=\"http://www.ncbi.nlm.nih.gov/sites/entrez?"+
					"cmd=Retrieve&db=pubmed&dopt=AbstractPlus&list_uids="+xml.PubmedArticleSet.PubmedArticle.MedlineCitation.PMID+
					"\">"+xml.PubmedArticleSet.PubmedArticle.MedlineCitation.PMID+"</a></h1>";
					totalS+=pubDate;
					totalS+="<br><h2>Title: "+escapeHTML(xml.PubmedArticleSet.PubmedArticle.MedlineCitation.Article.ArticleTitle,selectedText)+"</h2>";
					totalS+="<br><h2>Abstract:</h2><p> ";
					if (xml.PubmedArticleSet.PubmedArticle.MedlineCitation.Article.Abstract && xml.PubmedArticleSet.PubmedArticle.MedlineCitation.Article.Abstract.AbstractText)
							totalS += escapeHTML(xml.PubmedArticleSet.PubmedArticle.MedlineCitation.Article.Abstract.AbstractText, selectedText);
						else
							totalS += "NO ABSTRACT FOUND.";
					totalS+="</p>";
					totalS += "<br>";
					totalS = highlightSelected(totalS,selectedText);
					//textPanel.addChild(createText(totalS));
					createText(totalS, textPanel,xml.PubmedArticleSet.PubmedArticle.MedlineCitation.PMID);
				}else {
					for each (var article:Object in xml.PubmedArticleSet.PubmedArticle){
						var pubDate:String = "<br><h2>Date of Publication: ";
						if(article.MedlineCitation.Article.Journal.JournalIssue.PubDate.hasOwnProperty("Month")) {
							pubDate+=article.MedlineCitation.Article.Journal.JournalIssue.PubDate.Month + " ";
							// pubDate+=article.MedlineCitation.Article.Journal.JournalIssue.PubDate.Day + " ";
							pubDate+=article.MedlineCitation.Article.Journal.JournalIssue.PubDate.Year + "</h2>";
						} else if(article.MedlineCitation.Article.Journal.JournalIssue.PubDate.hasOwnProperty("MedlineDate")) {
							pubDate+=article.MedlineCitation.Article.Journal.JournalIssue.PubDate.MedlineDate + "</h2>";
						}
						totalS =" <h1>PMID:<a target=\"_blank\" href=\"http://www.ncbi.nlm.nih.gov/sites/entrez?"+
						"cmd=Retrieve&db=pubmed&dopt=AbstractPlus&list_uids="+article.MedlineCitation.PMID+
						"\">"+article.MedlineCitation.PMID+"</a></h1>";
						totalS+=pubDate;
						totalS+="<br><h2>Title: "+escapeHTML(article.MedlineCitation.Article.ArticleTitle,selectedText)+"</h2>";
						totalS += "<br><h2>Abstract:</h2><p> ";
						if (article.MedlineCitation.Article.Abstract && article.MedlineCitation.Article.Abstract.AbstractText)
							totalS += escapeHTML(article.MedlineCitation.Article.Abstract.AbstractText, selectedText);
						else
							totalS += "NO ABSTRACT FOUND.";
						totalS+="</p>";
						totalS += "<br><br>";
						totalS = highlightSelected(totalS, selectedText);
						createText(totalS, textPanel,article.MedlineCitation.PMID);
						totalS = "";
					}
					//textPanel.addChild(createText(totalS));
				}


            }

			public function createText(s:String,ui:UIComponent,pmid:Object):TextArea {
				var t:TextArea = new TextArea();
				var c:CheckBox = new CheckBox();
				// SemMedNHLBI version for check box
				c.label = "Select "+pmid;
				c.selected = true;
				c.data = pmid;
				ui.addChild(c);
				// End of SemMedNHLBI version for check box
				ui.addChild(t);
				// t.addChild(c);
				//c.x = 150;
				//c.y = 10;
				t.percentWidth = 100;
				t.height = 400;
				t.htmlText = s;
				// t.html = true;
				// t.text = s;


				var ss:StyleSheet = new StyleSheet();
				var h1:Object = new Object();
		        h1.fontFamily = "Verdana, Arial, Geneva, sans";
		        h1.fontWeight = "bold";
		        h1.color = "#6600CC";
		        h1.fontSize = 16;
		        h1.leading = 10;

		        var h2:Object = new Object();
		        h2.fontFamily = "Verdana, Arial, Geneva, sans";
		        h2.fontWeight = "bold";
		        h2.color = "#666666";
		        h2.fontSize = 16;
		        h2.leading = 4;

		        var para:Object = new Object();
		        para.fontFamily = "Georgia, Times New Roman, serif";
		        para.fontStyle = "normal";
		        para.leading = 4;
		        para.fontSize = 12;
		        para.display = "block";
		        para.color = "#000000";
		        para.fontWeight="normal";

		        var a:Object = new Object();
		        a.fontStyle = "normal";
		        a.leading = 4;
		        a.fontSize = 12;
		        //a.fontSize = 16;
		        a.color = "#0066FF";
		        //a.color= "#00FF00";
		        a.textDecoration = "underline";

		        var h3:Object = new Object();
		        // h3.color = "#FF0000";
		        h3.color = "#FF5500";
		        h3.backgroundColor = "#FFFF00";
				h3.fontWeight = "bold";
				// h3.fontStyle = "italic";

		        ss.setStyle("h1", h1);
		        ss.setStyle("h2", h2);
		        ss.setStyle("p", para);
		        ss.setStyle("a", a);
		        ss.setStyle("h3", h3);
				t.styleSheet = ss;

				c.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {
						var d:Object = event.target.data;

						if (c.selected){
							select(c.data);
							moveItem(c.data);
						}else{
							deselect(c.data);
							moveItem(c.data);
						}
				});

				return t;
			}


			public function moveItem(item:Object):void {
				var source:List = null;
				var destination:List = null;
				var selectedItem:Object;
				var index:Number=0;

				for each(var element:Object in relevantList.dataProvider) {
					if (element.data == item) {
						source = relevantList;
						destination = nonRelevantList;
						selectedItem = element;
						trace("Found it in relevants");
						break;

					}
					index++;
				}

				if (!source) {
					index = 0;
					for each(var element:Object in nonRelevantList.dataProvider) {
						if (element.data == item) {
							source = nonRelevantList;
							destination = relevantList;
							selectedItem = element;
							trace("found it in non-releavants");
							break;
						}
						index++;
					}
				}
				trace("it's item " + index);
				destination.dataProvider.addItem(selectedItem);
				source.dataProvider.removeItemAt(index);
				//source.selectedItems.push(selectedItem);

				var selectedItems:Array = new Array();
				for each(element in source.selectedItems)
					selectedItems.push(element);
				selectedItems.push(selectedItem);
				source.selectedItems = selectedItems;
			}

			public function select(s:Object) {

				if (!relevantList || !nonRelevantList)
					return;

				var ss:String = new String(s);
				var p:Array;


				if (relevantRadio.selected) {
					p= new Array();
					for each(var item:Object in relevantList.selectedItems)
						p.push(item);
					for each (item in relevantList.dataProvider) {
						var ss2:String = new String(item.data);
						if (ss == ss2)
							p.push(item);
					}
					relevantList.selectedItems = p;
				}


				if (nonRelevantRadio.selected) {
					p= new Array();
					for each(var item:Object in nonRelevantList.selectedItems)
						p.push(item);
					for each (item in nonRelevantList.dataProvider) {
						var ss2:String = new String(item.data);
						if (ss == ss2)
							p.push(item);
					}
					nonRelevantList.selectedItems = p;
				}
			}

			public function deselect(s:Object) {

				if (!relevantList || !nonRelevantList)
					return;

				var ss:String = new String(s);
				var p:Array;

				if (relevantRadio.selected){
					p = new Array();
					for each (var item:Object in relevantList.selectedItems) {
						var ss2:String = new String(item.data);
						if (ss != ss2)
							p.push(item);
					}
					relevantList.selectedItems = p;
				}

				if (nonRelevantRadio.selected){
					p = new Array();
					for each (item in nonRelevantList.selectedItems) {
						var ss2:String = new String(item.data);
						if (ss != ss2)
							p.push(item);
					}
					nonRelevantList.selectedItems = p;
				}
			}

            public function escapeHTML(s:String,a:Array):String{

				s = s.replace( />/g, "&lt;");
				s = s.replace( /</g, "&gt;");
				s = s.replace( /\"/g, "&quot;");
				s = s.replace( /&/g, "&amp;");
				//var s2:String;
           		//while ((s2=s.replace("<","&lt;"))!=s)
           		//	s = s2;
	        	//while ((s2=s.replace(">","&gt;"))!=s)
           		//	s = s2;

           		//s=s2;
            	//var pattern:RegExp;
				//for each (var e:String in a) {
				//	pattern = new RegExp(e, "ig");
            	//	s = s.replace(pattern, "<b>" + e + "</b>");
				//}

            	return s;
            }

			public function unRegexp(s:String):String {
				s = s.replace( /\(/g, "\\(");
				s = s.replace( /\)/g, "\\)");
				s = s.replace( /\[/g, "\\[");
				s = s.replace( /\]/g, "\\]");
				s = s.replace( /\-/g, "\\-");
				s = s.replace( /\./g, "\\.");
				s = s.replace( /\*/g, "\\*");
				return s;
			}

			public function regexp(s:String):String {
				s = s.replace( /\\\(/g, "(");
				s = s.replace( /\\\)/g, ")");
				s = s.replace( /\\\[/g, "[");
				s = s.replace( /\\\]/g, "]");
				s = s.replace( /\\\-/g, "-");
				s = s.replace( /\\\./g, ".");
				s = s.replace( /\\\*/g, "*");
				return s;
			}

			public function highlightSelected(s:String, a:Array):String {
				s = s.replace( /\.\,/g, ". ");
				var pattern:RegExp;
				for each (var e:String in a) {
					e = e.replace(/^AIM\:/, "");
					e = e.replace(/^AIMS\:/, "");
					e = e.replace(/^OBJECTIVE\:/, "");
					e = e.replace(/^OBJECTIVES\:/, "");
					e = e.replace(/^DESIGN\:/, "");
					e = e.replace(/^DESIGNS\:/, "");
					e = e.replace(/^SETTING\:/, "");
					e = e.replace(/^SETTINGS\:/, "");
					e = e.replace(/^METHOD\:/, "");
					e = e.replace(/^METHODS\:/, "");
					e = e.replace(/^RESULT\:/, "");
					e = e.replace(/^RESULTS\:/, "");
					e = e.replace(/^CONCLUSION:/, "");
					e = e.replace(/^CONCLUSIONS:/, "");

					// Alert.show(e);
					pattern = new RegExp(e, "i");
            		s = s.replace(pattern, "<h3>$&</h3>");
				}
				return s;
			}

            public function loadNode(node:Object,semTypes:Array):void{
            	var nodeSprite:NodeSprite = myGraph.dataF.addNode({CUI:node.id,name:node.name,semtype:node.semtype,umlks:null,extra:null});
				// var nodeSprite:TextSprite = myGraph.dataF.addNode({CUI:node.id,name:node.name,semtype:node.semtype,umlks:null,extra:null});

				if(!conceptDict[node.id]) {
					conceptDict[node.id] = node.semtype;
				}
            	if (node.name == seed.name)
            		seed.node = nodeSprite;

            	if (node.hasOwnProperty('umlsks_url'))
            		nodeSprite.data.umlks = node.umlsks_url;
            	if (node.hasOwnProperty('ghr_url'))
            		nodeSprite.data.ghr = node.ghr_url;
				if (node.hasOwnProperty('omim_url'))
					nodeSprite.data.omim = node.omim_url;
				if (node.hasOwnProperty('entrezgene_url'))
					nodeSprite.data.entrez = node.entrezgene_url;


           		var text:TextField = new TextField();
           		// var text:TextSprite = new TextSprite();
           		text.x=0;
           		text.y=0;

				text.text = node.name;
				// text.size = 11;
				text.autoSize = TextFieldAutoSize.LEFT;
				// text.autoSize = TextFieldAutoSize.NONE;
				// text.selectable = false;
				var tf:TextFormat = new TextFormat();
				if (node.name == seed.name) {
					tf.size = 12;
					tf.bold = true;
				} else {
					tf.size=10;
				}
				text.setTextFormat(tf);
				text.x = -text.width/2;
				// nodeSprite.renderer = ShapeRenderer.instance;
				var nrenderer = null;
				if (node.name == seed.name) {
					nodeSprite.shape = 2;
					nrenderer = new SeedNodeRenderer();
				} else
					nrenderer = new NodeRenderer();
				nrenderer.setZoom(1);
				nodeSprite.renderer = nrenderer;
				nodeSprite.addChild(text);
				// nodeSprite.trueFillAlpha = 0.7;
				if (node.hasOwnProperty('color')) {
					// if(node.color.charAt(0) == '#')
					nodeSprite.trueFillColor = hexToInt(node.color.substring(1));
					// else
					//	nodeSprite.trueFillColor = node.color;
				}
				nodeSprite.trueLineAlpha = 0.1;
				nodeSprite.trueLineColor = 0x000000;
				if(node.hasOwnProperty('x'))
					nodeSprite.x = node.x;
				if(node.hasOwnProperty('y'))
					nodeSprite.y = node.y;
				if(node.hasOwnProperty('visible'))
					nodeSprite.visible = node.visible;

				nodeSprite.addEventListener(MouseEvent.MOUSE_DOWN,function(event:MouseEvent):void{
					draggingLittle = true;
					nodeSprite.startDrag();
				});

				nodeSprite.addEventListener(MouseEvent.MOUSE_UP,function(event:MouseEvent):void{
					draggingLittle = false;
					nodeSprite.stopDrag();
					myGraph.redraw();
				});

				nodeSprite.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
					if (event.target.hasOwnProperty("data") && event.target.data.hasOwnProperty("CUI")){
						conceptLabel.text = event.target.data.name;
						cuiLabel.text = event.target.data.CUI;
						semtypeLabel.text = event.target.data.semtype;
						showConcept();
						myGraph.unglow();
						if (event.target.data.nPredications)
							nodePredicationLabel.text = event.target.data.nPredications;
						else
							nodePredicationLabel.text = "0";
						if (event.target.data.umlks!=null){
							umlsLink.text = event.target.data.umlks;
							umlsButton.enabled = true;
						}else
							umlsButton.enabled = false;
						if (event.target.data.ghr!=null){
							ghrLink.text = event.target.data.ghr;
							ghrButton.enabled = true;
						}else
							ghrButton.enabled = false;

						if (event.target.data.omim!=null){
							omimLink.text = event.target.data.omim;
							omimButton.enabled = true;
						}else
							omimButton.enabled = false;

						if (event.target.data.entrez!=null){
							entrezLink.text = event.target.data.entrez;
							entrezButton.enabled = true;
						}else
							entrezButton.enabled = false;
						accordion1.selectedIndex = 0;
					}
				});

				myGraph.allNodes.push(nodeSprite);

				var alreadyAdded:Boolean = false;

				for each(var o:Object in semTypes)
					if (o.semtype == node.semtype){
						alreadyAdded = true;
						break;
					}
				if (!alreadyAdded)
					semTypes.push({semtype:node.semtype,color:node.color});
            }

             public function loadNoded(node:Object,semTypes:Array):void{
            	var nodeSprite:NodeSprite = myGraphd.dataF.addNode({CUI:node.id,name:node.name,semtype:node.semtype,umlks:null,extra:null});
				// var nodeSprite:TextSprite = myGraph.dataF.addNode({CUI:node.id,name:node.name,semtype:node.semtype,umlks:null,extra:null});

				if(!conceptDict[node.id]) {
					conceptDict[node.id] = node.semtype;
				}
            	if (node.name == seed.name)
            		seed.node = nodeSprite;

            	if (node.hasOwnProperty('umlsks_url'))
            		nodeSprite.data.umlks = node.umlsks_url;
            	if (node.hasOwnProperty('ghr_url'))
            		nodeSprite.data.ghr = node.ghr_url;
				if (node.hasOwnProperty('omim_url'))
					nodeSprite.data.omim = node.omim_url;
				if (node.hasOwnProperty('entrezgene_url'))
					nodeSprite.data.entrez = node.entrezgene_url;


           		var text:TextField = new TextField();
           		// var text:TextSprite = new TextSprite();
           		text.x=0;
           		text.y=0;

				text.text = node.name;
				// text.size = 11;
				text.autoSize = TextFieldAutoSize.LEFT;
				// text.autoSize = TextFieldAutoSize.NONE;
				// text.selectable = false;
				var tf:TextFormat = new TextFormat();
				if (node.name == seed.name) {
					tf.size = 12;
					tf.bold = true;
				} else {
					tf.size=10;
				}
				text.setTextFormat(tf);
				text.x = -text.width/2;
				// nodeSprite.renderer = ShapeRenderer.instance;
				var nrenderer = null;
				if (node.name == seed.name) {
					nodeSprite.shape = 2;
					nrenderer = new SeedNodeRenderer();
				} else
					nrenderer = new NodeRenderer();
				nrenderer.setZoom(1);
				nodeSprite.renderer = nrenderer;
				nodeSprite.addChild(text);
				// nodeSprite.trueFillAlpha = 0.7;
				if (node.hasOwnProperty('color')) {
					// if(node.color.charAt(0) == '#')
					nodeSprite.trueFillColor = hexToInt(node.color.substring(1));
					// else
					//	nodeSprite.trueFillColor = node.color;
				}
				nodeSprite.trueLineAlpha = 0.1;
				nodeSprite.trueLineColor = 0x000000;
				if(node.hasOwnProperty('x'))
					nodeSprite.x = node.x;
				if(node.hasOwnProperty('y'))
					nodeSprite.y = node.y;
				if(node.hasOwnProperty('visible'))
					nodeSprite.visible = node.visible;

				nodeSprite.addEventListener(MouseEvent.MOUSE_DOWN,function(event:MouseEvent):void{
					draggingLittle = true;
					nodeSprite.startDrag();
				});

				nodeSprite.addEventListener(MouseEvent.MOUSE_UP,function(event:MouseEvent):void{
					draggingLittle = false;
					nodeSprite.stopDrag();
					myGraph.redraw();
				});

				nodeSprite.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
					if (event.target.hasOwnProperty("data") && event.target.data.hasOwnProperty("CUI")){
						conceptLabeld.text = event.target.data.name;
						cuiLabeld.text = event.target.data.CUI;
						semtypeLabeld.text = event.target.data.semtype;
						showConceptd();
						myGraphd.unglow();
						if (event.target.data.nPredications)
							nodePredicationLabeld.text = event.target.data.nPredications;
						else
							nodePredicationLabeld.text = "0";
						if (event.target.data.umlks!=null){
							umlsLinkd.text = event.target.data.umlks;
							umlsButtond.enabled = true;
						}else
							umlsButtond.enabled = false;
						if (event.target.data.ghr!=null){
							ghrLinkd.text = event.target.data.ghr;
							ghrButtond.enabled = true;
						}else
							ghrButtond.enabled = false;

						if (event.target.data.omim!=null){
							omimLinkd.text = event.target.data.omim;
							omimButtond.enabled = true;
						}else
							omimButtond.enabled = false;

						if (event.target.data.entrez!=null){
							entrezLinkd.text = event.target.data.entrez;
							entrezButtond.enabled = true;
						}else
							entrezButtond.enabled = false;
						accordion1d.selectedIndex = 0;
					}
				});

				myGraphd.allNodes.push(nodeSprite);

				var alreadyAdded:Boolean = false;

				for each(var o:Object in semTypes)
					if (o.semtype == node.semtype){
						alreadyAdded = true;
						break;
					}
				if (!alreadyAdded)
					semTypes.push({semtype:node.semtype,color:node.color});
            }


            public function loadEdge(edge:Object,predicates:Array, visibility:String):void{
            	var s:String;
            	var t:String;
            	var l:String;
            	var color:String;

           		s = edge.source;
           		t = edge.target;
           		l = edge.label;
           		color = edge.color;


				if (s == 'C0683474' && t == 'C0028754')
					trace("this is the one");

            	var source:NodeSprite = null;
            	for(var i:int = 0;i<myGraph.dataF.nodes.size;i++){
            		if (myGraph.dataF.nodes[i].data.CUI == s){
            			source = myGraph.dataF.nodes[i];
            			break;
            		}
            	}

            	var target:NodeSprite = null;
            	for(var j:int = 0;j<myGraph.dataF.nodes.size;j++){
            		if (myGraph.dataF.nodes[j].data.CUI == t){
            			target = myGraph.dataF.nodes[j];
            			break;
            		}
            	}
            	var st:String = new String(s + " - " + t);
            	// Alert.show(st);

				if (source.data.nPredications)
					source.data.nPredications++;
				else
					source.data.nPredications = 1;

				if (target.data.nPredications)
					target.data.nPredications++;
				else
					target.data.nPredications = 1;

            	// var e:EdgeSprite = myGraph.dataF.addEdgeFor(source,target,true,{predicate:l,citation:"",subject:source.data.name,target:target.data.name});
				// Alert.show("step 1");
				var e:EdgeSprite = myGraph.dataF.addEdgeFor(source,target,true,{predicate:l,citation:"",subject:source.data.name,target:target.data.name,subjectCUI:source.data.CUI,targetCUI:target.data.CUI});
				// Alert.show("step 2");
				if(visibility == "invisible") {
					myGraph.dataF.removeEdge(e);
				}

            	myGraph.allEdges.push(e);
            	// Alert.show("step 3");
            		e.renderer = semmed.EdgeRenderer.instance;
            		// if(color.charAt(0) == '#') // hexadecimal
            		e.fillColor = hexToInt(color.substring(1));
            		// else	// already decimal
            		//	e.fillColor = color;
            		e.alpha = 1;
            		e.lineAlpha = 1;
            		e.lineWidth = 2;
            		e.buttonMode = true;

            	var contained:Boolean = false;
            	for(i = 0; i<predicates.length;i++)
            		if (predicates[i].label==l){
						contained = true;
						break;
            		}
				// Alert.show("step 4");
				var sentences:Array = new Array();

				if (!contained)
				// Dongwook Shin, 09/18/2008
				// It was changed after graph save feature, since the saved graph has all the edges and some edges invisible has to be filtered out
            	// if (!contained && !source.visible == false && !target.visible == false)
            		predicates.push({label:l,color:e.fillColor});

				var uniqueCitations:Number = 1;
            	var pmid:String;
            	/* if (edge.sentence.hasOwnProperty("id")){
            		pmid  = edge.sentence.id;
            		pmid = pmid.substr(0, pmid.indexOf("."));
            		// FIX: If there is space at the end of the PMID, NHLBI doesn't draw the relevant/non/relevant graph correctly
            		if(pmid.charAt(pmid.length -1) == " ")
	            			pmid = pmid.substr(0, pmid.length-1);
            		e.data.citation+=pmid+",";
            		sentences.push(unRegexp(escapeHTML(edge.sentence.text,new Array())));
            	}else{
	            	for each(var n:Object in edge.sentence){
	            		pmid = n.id;
	            		pmid = pmid.substr(0, pmid.indexOf("."));
	            		// FIX: If there is space at the end of the PMID, NHLBI doesn't draw the relevant/non/relevant graph correctly
	            		if(pmid.charAt(pmid.length -1) == " ")
	            			pmid = pmid.substr(0, pmid.length-1);
						//if (e.data.citation && (e.data.citation as String).indexOf(pmid) == -1)
						//	uniqueCitations++;
	            		e.data.citation+=pmid+",";
	            		sentences.push(unRegexp(escapeHTML(n.text,new Array())));
	            	}
	            }

            	e.data.sentences = sentences;
            	e.data.predications = sentences.length;
				e.data.citationNumber = uniqueCitations; */

            	e.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
					if (event.target.hasOwnProperty("data") && event.target.data.hasOwnProperty("predicate")){
						showEdge();
						predicateLabel.text = event.target.data.predicate;
						targetLabel.text = event.target.data.target;
						sourceLabel.text = event.target.data.subject;
						predicationNumberLabel.text = event.target.data.predications;


						selectedCitations = event.target.data.citation;

						var numberPredications:Number = 0;
						var numberCitations:Number = 0;
						var ids:Array = selectedCitations.split(",");

						ids.pop();



						var tempString:String;
						var unique:Array = uniqueIDS(ids);

						if (relevantRadio && relevantRadio.selected) {
							for each(var ss:String in ids)
								for each(var cui:Object in relevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberPredications++;
								}
							for each(ss in unique)
								for each(var cui:Object in relevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberCitations++;
								}
						}else if	(relevantRadio && nonRelevantRadio.selected){
							for each(var ss:String in ids)
								for each(var cui:Object in nonRelevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberPredications++;
								}
							for each(ss in unique)
								for each(cui in nonRelevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberCitations++;
								}
						}else{
							numberPredications = ids.length;
							numberCitations = unique.length;
						}

						predicationNumberLabel.text = new String(numberPredications);
						citationNumberLabel.text = new String(numberCitations);
						selectedText = event.target.data.sentences;
						accordion1.selectedIndex = 0;

						if ((relevants && relevants.citation) ||
						     (nonRelevants && nonRelevants.citation)) {
							highlightTitles(event.target as EdgeSprite);
						}
					}
				});
            }

            public function loadEdged(edge:Object,predicates:Array, visibility:String):void{
            	var s:String;
            	var t:String;
            	var l:String;
            	var color:String;

           		s = edge.source;
           		t = edge.target;
           		l = edge.label;
           		color = edge.color;


				if (s == 'C0683474' && t == 'C0028754')
					trace("this is the one");

            	var source:NodeSprite = null;
            	for(var i:int = 0;i<myGraphd.dataF.nodes.size;i++){
            		if (myGraphd.dataF.nodes[i].data.CUI == s){
            			source = myGraphd.dataF.nodes[i];
            			break;
            		}
            	}

            	var target:NodeSprite = null;
            	for(var j:int = 0;j<myGraphd.dataF.nodes.size;j++){
            		if (myGraphd.dataF.nodes[j].data.CUI == t){
            			target = myGraphd.dataF.nodes[j];
            			break;
            		}
            	}
            	var st:String = new String(s + " - " + t);
            	// Alert.show(st);

				if (source.data.nPredications)
					source.data.nPredications++;
				else
					source.data.nPredications = 1;

				if (target.data.nPredications)
					target.data.nPredications++;
				else
					target.data.nPredications = 1;

            	// var e:EdgeSprite = myGraph.dataF.addEdgeFor(source,target,true,{predicate:l,citation:"",subject:source.data.name,target:target.data.name});
				// Alert.show("step 1");
				var e:EdgeSprite = myGraphd.dataF.addEdgeFor(source,target,true,{predicate:l,citation:"",subject:source.data.name,target:target.data.name,subjectCUI:source.data.CUI,targetCUI:target.data.CUI});
				// Alert.show("step 2");
				if(visibility == "invisible") {
					myGraphd.dataF.removeEdge(e);
				}

            	myGraphd.allEdges.push(e);
            	// Alert.show("step 3");
            		e.renderer = semmed.EdgeRenderer.instance;
            		// if(color.charAt(0) == '#') // hexadecimal
            		e.fillColor = hexToInt(color.substring(1));
            		// else	// already decimal
            		//	e.fillColor = color;
            		e.alpha = 1;
            		e.lineAlpha = 1;
            		e.lineWidth = 2;
            		e.buttonMode = true;

            	var contained:Boolean = false;
            	for(i = 0; i<predicatesd.length;i++)
            		if (predicatesd[i].label==l){
						contained = true;
						break;
            		}
				// Alert.show("step 4");
				var sentences:Array = new Array();

				if (!contained)
				// Dongwook Shin, 09/18/2008
				// It was changed after graph save feature, since the saved graph has all the edges and some edges invisible has to be filtered out
            	// if (!contained && !source.visible == false && !target.visible == false)
            		predicates.push({label:l,color:e.fillColor});

				var uniqueCitations:Number = 1;
            	var pmid:String;
            	 if (edge.sentence.hasOwnProperty("id")){
            		pmid  = edge.sentence.id;
            		pmid = pmid.substr(0, pmid.indexOf("."));
            		// FIX: If there is space at the end of the PMID, NHLBI doesn't draw the relevant/non/relevant graph correctly
            		if(pmid.charAt(pmid.length -1) == " ")
	            			pmid = pmid.substr(0, pmid.length-1);
            		e.data.citation+=pmid+",";
            		sentences.push(unRegexp(escapeHTML(edge.sentence.text,new Array())));
            	}else{
	            	for each(var n:Object in edge.sentence){
	            		pmid = n.id;
	            		pmid = pmid.substr(0, pmid.indexOf("."));
	            		// FIX: If there is space at the end of the PMID, NHLBI doesn't draw the relevant/non/relevant graph correctly
	            		if(pmid.charAt(pmid.length -1) == " ")
	            			pmid = pmid.substr(0, pmid.length-1);
						//if (e.data.citation && (e.data.citation as String).indexOf(pmid) == -1)
						//	uniqueCitations++;
	            		e.data.citation+=pmid+",";
	            		sentences.push(unRegexp(escapeHTML(n.text,new Array())));
	            	}
	            }

            	e.data.sentences = sentences;
            	e.data.predications = sentences.length;
				e.data.citationNumber = uniqueCitations;

            	e.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
					if (event.target.hasOwnProperty("data") && event.target.data.hasOwnProperty("predicate")){
						showEdged();
						predicateLabeld.text = event.target.data.predicate;
						targetLabeld.text = event.target.data.target;
						sourceLabeld.text = event.target.data.subject;
						predicationNumberLabeld.text = event.target.data.predications;


						selectedCitations = event.target.data.citation;

						var numberPredications:Number = 0;
						var numberCitations:Number = 0;
						var ids:Array = selectedCitations.split(",");

						ids.pop();



						var tempString:String;
						var unique:Array = uniqueIDS(ids);

						if (relevantRadio && relevantRadio.selected) {
							for each(var ss:String in ids)
								for each(var cui:Object in relevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberPredications++;
								}
							for each(ss in unique)
								for each(var cui:Object in relevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberCitations++;
								}
						}else if	(relevantRadio && nonRelevantRadio.selected){
							for each(var ss:String in ids)
								for each(var cui:Object in nonRelevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberPredications++;
								}
							for each(ss in unique)
								for each(cui in nonRelevantList.dataProvider) {
									tempString = new String(cui.data);
									if (tempString == ss)
										numberCitations++;
								}
						}else{
							numberPredications = ids.length;
							numberCitations = unique.length;
						}

						predicationNumberLabeld.text = new String(numberPredications);
						citationNumberLabeld.text = new String(numberCitations);
						selectedText = event.target.data.sentences;
						accordion1d.selectedIndex = 0;

						if ((relevants && relevants.citation) ||
						     (nonRelevants && nonRelevants.citation)) {
							highlightTitles(event.target as EdgeSprite);
						}
					}
				});
            }



			public function deselectAll():void {
				if (relevantList)
					relevantList.selectedIndex = -1;
				if (nonRelevantList)
					nonRelevantList.selectedIndex = -1;
				myGraph.unglow();
			}

			public function highlightTitles(edge:EdgeSprite) {
				if (!relevantList)
					return;
				var s:Array = uniqueIDS((edge.data.citation as String).split(","));
				relevantList.selectedIndex = -1;
				nonRelevantList.selectedIndex = -1;
				var r:Array = new Array();
				var n:Array = new Array();


				for each (var c:String in s) {
					if (relevantRadio.selected)
						for (var i:Number = 0; i < relevantList.dataProvider.length;i++ ) {
							var tempString:String = new String(relevantList.dataProvider[i].data);
							if (tempString == c)
								r.push(i);
						}
					if (nonRelevantRadio.selected)
						for (i = 0; i < nonRelevantList.dataProvider.length;i++ ) {
							var tempString:String = new String(nonRelevantList.dataProvider[i].data);
							if (tempString == c)
								n.push(i);
						}
				}
				relevantList.selectedIndices = r;
				nonRelevantList.selectedIndices = n;
				relevantList.dispatchEvent(new ListEvent(ListEvent.ITEM_CLICK));
				myGraph.glowEdge(edge);
			}

			public function uniqueIDS(idsAll:Array):Array {
				var idsU:Array = new Array();
				for each(var a:String in idsAll) {
					var found:Boolean = false;
					for each (var i:String in idsU)
						if (i == a)
							found = true;
					if (!found)
					idsU.push(a);
				}
				return idsU;
			}

            public function addListener():void{
            	relevantList.addEventListener(MouseEvent. CLICK,function():void{
            		if (relevantRadio.selected)
	            		myGraph.glow(relevantList.selectedItems);
            	});
				relevantList.addEventListener(MouseEvent.DOUBLE_CLICK, retrieveRelevantCitation);
            	nonRelevantList.addEventListener(MouseEvent.CLICK,function():void{
            		if (nonRelevantRadio.selected)
	            		myGraph.glow(nonRelevantList.selectedItems);
            	});
				nonRelevantList.addEventListener(MouseEvent.DOUBLE_CLICK, retrieveNonrelevantCitation);
            }

            public function dragWhole():void{
            	if (!draggingLittle)
	            	draggingWhole = true;
            }

            public function stopDragWhole():void{
            	draggingWhole = false;
            }

			public function getViewportCenter():Point {
				var x:Number = -myGraph.x/zoom+(vbox1.width/2)/zoom;
				var y:Number = -myGraph.y/zoom + (vbox1.height / 2) / zoom;
				return new Point(x,y);
			}

			public function getWorldPosition(xS:Number, yS:Number):Point {
				var x:Number = -myGraph.x/zoom+(xS)/zoom;
				var y:Number = -myGraph.y/zoom + (yS) / zoom;
				return new Point(x,y);
			}

			public function moveToCenter(x:Number, y:Number, effect:Boolean = false):void {
				if (effect) {
					moveEffect.xFrom = myGraph.x;
					moveEffect.yFrom = myGraph.y;
					moveEffect.xTo = vbox1.width / 2 - x * zoom;
					moveEffect.yTo = vbox1.height / 2 - y * zoom;
					moveEffect.play();
				}else{
					myGraph.x = vbox1.width / 2 - x * zoom;
					myGraph.y = vbox1.height / 2 - y * zoom;
				}
			}

			public function moveToCenterd(x:Number, y:Number, effect:Boolean = false):void {
				if (effect) {
					moveEffectd.xFrom = myGraphd.x;
					moveEffectd.yFrom = myGraphd.y;
					moveEffectd.xTo = vbox1d.width / 2 - x * zoom;
					moveEffectd.yTo = vbox1d.height / 2 - y * zoom;
					moveEffectd.play();
				}else{
					myGraphd.x = vbox1.width / 2 - x * zoom;
					myGraphd.y = vbox1.height / 2 - y * zoom;
				}
			}

			public function noResults():void {
				currentState = 'no_results';
			}

			public function filter(t:Boolean=true):void {
				var p:Array = new Array();
	            for each (var c:CheckBox in predicateFilters)
	            	if (c.selected) {
	            		p.push(c.label);
	            	}
				var s:Array = new Array();
	            // for each (c in semtypeFilters)
	            //	if (c.selected)
	            //		s.push(c.label);

				/* if (relevantRadio){
            		if (relevantRadio.selected)
            			myGraph.filterCitations(relevantList.dataProvider,p,s);
            		else
            			myGraph.filterCitations(nonRelevantList.dataProvider,p,s);
            	}else */
            	myGraph.filter(p,s);
				myGraph.changeLayout(layoutChoose.selectedItem.data, t);
			}

			public function filterd(t:Boolean=true):void {
				var p:Array = new Array();
	            for each (var c:CheckBox in predicateFiltersd)
	            	if (c.selected) {
	            		p.push(c.label);
	            	}
				var s:Array = new Array();
	            // for each (c in semtypeFilters)
	            //	if (c.selected)
	            //		s.push(c.label);

				/* if (relevantRadio){
            		if (relevantRadio.selected)
            			myGraph.filterCitations(relevantList.dataProvider,p,s);
            		else
            			myGraph.filterCitations(nonRelevantList.dataProvider,p,s);
            	}else */
            	myGraphd.filter(p,s);
				myGraphd.changeLayout(layoutChoose.selectedItem.data, t);
			}

			public function searchConcept():void {
				searchedConcepts = new Array();
				var p:RegExp = new RegExp(conceptSearch.text, "i");
				for each(var n:NodeSprite in myGraph.dataF.nodes){
					if (n.visible && (n.data.name as String).match(p))
						searchedConcepts.push( { label:n.data.name, node:n } );
				}
				searchList.dataProvider = searchedConcepts;
			}

			public function getDaughterGraph():void {
				var nodeListString:String = new String();
				for each(var item:Object in nodelist.selectedItems){
				 nodeListString = item + "|" + nodeListString;
				}
				// var url:URLRequest = new URLRequest("..");
				// navigateToURL(url, "_blank");
				// ExternalInterface.call("window.open", "./summarize.jsp", "toolbar=yes", "status=yes", "resizable=yes", "scrollbars=yes");
				getDGraph.addEventListener("result",dGraphCallback);
				currentState = 'graphd';
				getDGraph.url="../servlet/RetrieveGraph?dgraph=t&nodelist="+nodeListString;
                getDGraph.send();

			}

            private function clearDGraph() : void {
             	vbox1d.removeAllChildren();
             	// Alert.show("clearDGraph() called");
             	myGraphd.clearGraph();
            }
						//interprets graph xml
			private function dGraphCallback(event:ResultEvent) : void{

            	var xml:Object = event.result;
            	// xmlInput = event.result;
				// Alert.show("drawing daughter graph");
				if (xml == null) {
					Alert.show("xml is null");
					noResults();
					return;
				}else if (xml.graph==null) {
					Alert.show("xml graph is null");
					noResults();
					return;
				}
				// vbox1d.removeAllChildren();
				myGraphd.clearGraph();

				if(xml.graph.hasOwnProperty("alreadyRendered"))
					alreadyRendered = "yes";
				else
					alreadyRendered = "no";
				seed = {name:xml.graph.seed.value,node:null};

				semTypesd = new Array();
				// Alert.show("start loading node");
				if (xml.graph.node.hasOwnProperty("id"))
	            	loadNoded(xml.graph.node,semTypesd);
				else {
	   				for each(var node:Object in xml.graph.node)
	            		loadNoded(node,semTypesd);
				}

	            predicatesd = new Array();

				var visibility:String;
          	    if (xml.graph.edge.hasOwnProperty("target")) {
          	    	if(xml.graph.edge.hasOwnProperty("visible"))
          	    		visibility = "invisible";
          	    	else
          	    		visibility = "visible";
          	    	 loadEdged(xml.graph.edge, predicatesd, visibility);
          	    } else
          	    	for each(var edge:Object in xml.graph.edge) {
          	    		if(edge.hasOwnProperty("visible"))
          	    			visibility = "invisible";
          	    		 else
          	    			visibility = "visible";
          	    		loadEdged(edge, predicatesd, visibility);
          	    	}

	            var h:HRule = new HRule;
	            var label:Label = new Label;
 				var savedRelationFilters:Array = new Array();
				if(alreadyRendered == "yes") {
					if(xml.graph.relationFilters.relation.hasOwnProperty("id"))
						savedRelationFilters.push(xml.graph.relationFilters.relation);
					else
						for each(var rel:String in xml.graph.relationFilters.relation) {
							savedRelationFilters.push(rel);
						}
				}

	            label.text = "Relations";
	            form1d.addChild(label);
	            form1d.addChild(h);

	            predicateFiltersd = new Array();
	            for(var k:int=0;k<predicatesd.length;k++){
	            	var cb:CheckBox = new CheckBox();
	            	filters.push(cb);
	            	if(alreadyRendered == "yes") {
	            		var relationFound:Boolean = false;
	            		for each(var rel:String in savedRelationFilters) {
	            			if(predicatesd[k].label == rel) {
	            				relationFound = true;
	            				break;
	            			}
	            		}
	            		if(relationFound == true)
	            			cb.selected = true;
	            		else
	            			cb.selected = false;
	            	} else
	            		cb.selected = true;

	            	cb.label = predicatesd[k].label;
	            	cb.setStyle("color", predicatesd[k].color);
					cb.setStyle("fillColors", [predicatesd[k].color, 0xAAAAAA]);
					cb.setStyle("fillAlphas", [1, 1]);
	            	form1d.addChild(cb);
	            	predicateFiltersd.push(cb);
	            	cb.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
	            		filterd();
	            	});
	            }

	            form1d.addChild(new HRule());
	            // label = new Label();
	            //  label.text = "Semantic Types";
	            // form1.addChild(label);
	            // form1.addChild(new HRule());

				semtypeFilters = new Array();
	           	/* for each(var sem:Object in semTypes){
	           		var cb2:CheckBox = new CheckBox();
	           		cb2.label = sem.semtype;
	           		cb2.setStyle("color", sem.color);
					cb2.setStyle("alpha", 1);
					cb2.setStyle("fillColors",[sem.color, sem.color]);
					cb2.setStyle("fillAlphas", [1, 1]);
					cb2.selected = true;
					//cb2.enabled = false;
					semtypeFilters.push(cb2);
	           		form1.addChild(cb2);
					cb2.addEventListener(MouseEvent.CLICK,function (event:MouseEvent):void{
	            		filter();
	            	});
	           	} */

				for each(var node2:NodeSprite in myGraph.dataF.nodes)
					if (node2.data.name == seed.name) {
						seed.node = node2;
						break;
					}

				myGraphd.dataF.sort("fillColor", 2);
				myGraphd.loadData(alreadyRendered);
				if(alreadyRendered == "yes") {
					layoutChoose.selectedIndex = 4;
				}
//				if (seed.node)
//					trace("Your seed is " + seed.node.data.name);
				myGraphd.setRoot(seed.node);

          	    // for each(var n:Object in xml.graph.degreeList.node){
          	    //   mnodeList.push(n.name);
          	    // }

	            myGraphd.play();

				 if(alreadyRendered =="no")
					centerOnConcept(seed.node);
				 else if(xml.graph.hasOwnProperty("graphPosition")) {
				 	myGraphd.x = xml.graph.graphPosition.x;
				 	myGraphd.y = xml.graph.graphPosition.y;
				 	myGraphd.scaleX = xml.graph.graphZoom.x;
				 	myGraphd.scaleY = xml.graph.graphZoom.y;
				 }
				myGraphd.redraw();

            }

			public function centerOnConcept(node:NodeSprite = null):void {

				var n:NodeSprite;
				if (node == null && searchList && searchList.selectedItem)
					n = searchList.selectedItem.node as NodeSprite;
				else
					n = node;

				if (n) {
					moveToCenter(n.parent.x+n.x, n.parent.y+n.y,true);
				}
			}

			public function saveFile():void {
        		// var relevantSetString = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelevantCitations>\n";
        		// import mx.rpc.http.HTTPService;
        		// var uploadRelevantDocuments:mx.rpc.http.HTTPService = new mx.rpc.http.HTTPService();
        		// import flash.system.Security;
        		var relevantSetString:String;
        		var nonRelevantSetString:String;
				var titleString:String;
				var pmidString:String;
				var params:Object = {};
				relevantSetString = "<RelevantCitations>\n";

				for each(var data:Object in relevantList.dataProvider) {
				 		var relevantString:String;
				 		pmidString = new String(data.data);
						titleString = new String(data.label);
					  relevantString = "<Citation>\n<PMID>" + pmidString + "</PMID>\n<Title>" + escapeHTML(titleString, null) + "</Title>\n</Citation>\n";
						relevantSetString = relevantSetString + relevantString;
				}
				relevantSetString = relevantSetString + "</RelevantCitations>\n";
				nonRelevantSetString = "<NonrelevantCitations>\n";
				for each(var data:Object in nonRelevantList.dataProvider) {
				 		var nonRelevantString:String;
				 		pmidString = new String(data.data);
						titleString = new String(data.label);
					    nonRelevantString = "<Citation>\n<PMID>" + pmidString + "</PMID>\n<Title>" + escapeHTML(titleString, null) + "</Title>\n</Citation>\n";
						nonRelevantSetString = nonRelevantSetString + nonRelevantString;
				}
				nonRelevantSetString = nonRelevantSetString + "</NonrelevantCitations>\n";
				var saveString:String = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Citations>\n" + relevantSetString + nonRelevantSetString + "</Citations>\n";
				// params["uploadString"] = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Citations>\n" + relevantSetString + nonRelevantSetString + "</Citations>\n";
				// uploadRelevantDocuments.addEventListener(MouseEvent.CLICK,saveCallBack);
				// uploadRelevantDocuments.url="../servlet/RetrieveGraph?uploadString="+relevantSetString;
				// uploadRelevantDocuments.url="../servlet/RetrieveGraph";
				// uploadRelevantDocuments.method = "POST";
				// uploadRelevantDocuments.send(params);

				var fileName:String = "relevant.xml";
				Security.allowDomain("*");
				saveFileRef = new FileReference();
				saveFileRef.addEventListener(Event.SELECT, onSaveFileSelected);
				saveFileRef.save(saveString,fileName);
			}

			private function onSaveFileSelected(event:Event):void{
				// saveFileRef.addEventListener(ProgressEvent.PROGRESS, onProgress);
				// saveFileRef.addEventListener(Event.COMPLETE, onComplete);
			}


			private function saveCallBack(event:ResultEvent):void {
    			import flash.system.Security;
    			var urlstring:String = String(event.result);
    			if (urlstring == null) {
					noResults();
					return}
				Security.allowDomain("*");
				trace(urlstring);
    			myfile = new FileReference();
    			configureListeners(myfile);
    			var downloadURL:URLRequest;
        		var fileName:String = "relevant.xml";
    			downloadURL = new URLRequest();
            	downloadURL.url = urlstring;
            	myfile.download(downloadURL, fileName);
			 }

			public function captureCenter():void {
				oldCenter = myGraph.globalToLocal(vbox1.localToGlobal(new Point(vbox1.width / 2, vbox1.height / 2)))
			}

			public function showConcept():void {
				edgeInformation.visible = false;
				nodeInformation.alpha = 1.0;
				nodeInformation.visible = true;
				edgeInformation.visible = false;
				//nodeInformation.left = 10;
				//conceptLabel.left = 71;
				//conceptLabel.right = 10;
				//cuiLabel.left = 42;
				//cuiLabel.right = 10;
				//semtypeLabel.left = 85;
				//semtypeLabel.right = 10;
			}

			public function showConceptd():void {
				edgeInformationd.visible = false;
				nodeInformationd.alpha = 1.0;
				nodeInformationd.visible = true;
				edgeInformationd.visible = false;
				//nodeInformation.left = 10;
				//conceptLabel.left = 71;
				//conceptLabel.right = 10;
				//cuiLabel.left = 42;
				//cuiLabel.right = 10;
				//semtypeLabel.left = 85;
				//semtypeLabel.right = 10;
			}

			public function showEdge():void {
				nodeInformation.visible = false;
				edgeInformation.alpha = 1.0;
				edgeInformation.visible = true;

			}

			public function showEdged():void {
				nodeInformationd.visible = false;
				edgeInformationd.alpha = 1.0;
				edgeInformationd.visible = true;

			}

			 private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name);
        }



		]]>
	</mx:Script>


	<mx:Resize id="resize" />
	<!-- effectEnd="enterFirstState()"mouseWheel="zoomIt(event)"  -->

	<mx:Move id="moveEffect" target="{myGraph}" />
	<mx:Move id="moveEffectd" target="{myGraphd}" />

	<mx:VBox x="10" y="10" width="100%" height="100%" id="mainBox">
		<mx:HBox x="10" y="10" width="100%" height="90%">
			<mx:VBox height="100%" width="80%" borderStyle="inset"
				backgroundColor="#ffffff" mouseDown="dragWhole()" mouseUp="stopDragWhole()" mouseMove="dragIt(event)"
				 mouseWheel="zoomIt(event)" clipContent="false" autoLayout="false" id="vbox1"
				resizeEffect="resize">
				<graph:GraphVisualizer width="100%" height="100%" id="myGraph" themeColor="#0000ff"/>

			</mx:VBox>
			<mx:Accordion width="18%" height="100%" id="accordion1">
				<mx:VBox label="Information" width="100%" height="100%" id="canvas1" backgroundColor="0xFAFAFF">
					<!-- <mx:HRule height="1" verticalCenter="-5" left="10" right="10"/>-->
					<mx:Label text="Concept Information"/>
					<mx:Canvas width="100%" height="45%" id="nodeInformation" alpha="1.0" visible="false" showEffect="fadeIn" hideEffect="fadeOut"
					           horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:Label left="10" y="36" text="CUI:"/>
						<mx:Label left="10" y="62" text="Sem. type:"/>
						<mx:Label right="10" y="62" text="Label" maxWidth="150" styleName="text" textAlign="right" id="semtypeLabel"/>
						<mx:Label right="10" y="36" text="Label" maxWidth="150" styleName="text" textAlign="right" id="cuiLabel"/>
						<mx:Label left="10" y="10" text="Concept:"/>
						<mx:Label right="10" y="10" text="Label" maxWidth="100" textAlign="right" id="conceptLabel"/>
						<mx:Label left="10" y="88" text="No. Predications:"/>
						<mx:Label y="88" text="Label" textAlign="right" left="127" right="10" id="nodePredicationLabel" />
						<mx:Label x="10" y="140" text="Label" id="umlsLink" visible="false"/>
						<mx:Label x="11" y="140" text="Label" id="ghrLink" visible="false"/>
						<mx:Label x="12" y="140" text="Label" id="omimLink" visible="false"/>
						<mx:Label x="13" y="140" text="Label" id="entrezLink" visible="false"/>
						<mx:Button label="UMLS" id="umlsButton" width="66" bottom="56" horizontalCenter="-34">
							<mx:click>navigateToURL(new URLRequest(umlsLink.text), '_blank')</mx:click>
						</mx:Button>
						<mx:Button label="GHR" id="ghrButton" horizontalCenter="34" width="68.5" bottom="56">
							<mx:click>navigateToURL(new URLRequest(ghrLink.text), '_blank')</mx:click>
						</mx:Button>
						<mx:Button label="OMIM" horizontalCenter="-34" id="omimButton" width="65" bottom="20">
							<mx:click>navigateToURL(new URLRequest(omimLink.text), '_blank')</mx:click>
						</mx:Button>
						<mx:Button horizontalCenter="34" label="ENTREZ" id="entrezButton" bottom="20">
							<mx:click>navigateToURL(new URLRequest(entrezLink.text), '_blank')</mx:click>
						</mx:Button>
					</mx:Canvas>
					<mx:Label text="Relationship Information"/>
					<mx:Canvas width="100%" height="45%" id="edgeInformation" alpha="1.0" visible="false" showEffect="fadeIn" hideEffect="fadeOut"
								horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:Label x="10" y="10" text="Subject:" id="sL" />
						<mx:Label y="10" text="Label" id="sourceLabel" maxWidth="100" textAlign="right" right="10"/>

						<mx:Label x="10" y="36" text="Relation:" id="label1"/>
						<mx:Label right="10" y="36" text="Label" maxWidth="150" textAlign="right" id="predicateLabel"/>

						<mx:Label x="10" y="62" text="Object:"/>
						<mx:Label y="62" text="Label" textAlign="right" maxWidth="100"  id="targetLabel" right="10"/>

						<mx:Label x="10" y="86" text="No. Predications:"/>
						<mx:Label y="86" text="Label" textAlign="right" width="100" id="predicationNumberLabel" right="10"/>

						<mx:Label x="10" y="110" text="No. Citations:"/>
						<mx:Label y="110" text="Label" textAlign="right" width="100" id="citationNumberLabel" right="10"/>


						<!-- <mx:Button label="Citations" bottom="25" horizontalCenter="0">
							<mx:click>
								<![CDATA[
									if (currentState=='relevant')
										showingRelevantCitation=true;
									retrieveCitations();
									if (currentState=='relevant')
										currentState='relevantCitation';
									else
										currentState='citation';
								]]>
							</mx:click>
						</mx:Button> -->
					</mx:Canvas>
					<!--


					-->
				</mx:VBox>
				<mx:VBox label="Relation Labels" width="100%" height="100%" id="form1" paddingLeft="10" backgroundColor="0xFAFAFF">
				</mx:VBox>
				<mx:VBox label="Select Daughter Graph" width="100%" height="100%" id="formDG" paddingLeft="10" backgroundColor="0xFAFAFF">
					<mx:VBox width="100%" height="100%">
						<mx:Label text="Select concepts for Daughter Graph:"/>
						<mx:HBox width="100%">
							<mx:List id="nodelist"
            					allowMultipleSelection="{true}"
            					dataProvider="{mnodeList}"
            					verticalScrollPolicy="on" />
            				<mx:Button label="Select" id="getDG" click="getDaughterGraph()"/>
						</mx:HBox>
					</mx:VBox>
				</mx:VBox>
				<mx:VBox label="Search" width="100%" height="100%" id="form2" paddingLeft="10" paddingRight="10" backgroundColor="0xFAFAFF">
					<mx:VBox width="100%" height="100%">
						<mx:Label text="Search for concept:"/>
						<mx:HBox width="100%">
							<mx:TextInput left="20" id="conceptSearch"/>
							<mx:Button label="Search" id="searchButton" click="searchConcept()"/>
						</mx:HBox>
						<mx:List dataProvider="{searchedConcepts}" width="100%" click="centerOnConcept()" id="searchList">
						</mx:List>
					</mx:VBox>
				</mx:VBox>
			</mx:Accordion>
		</mx:HBox>
		<mx:ApplicationControlBar height="40" width="98%" id="hbox1" fillColors="[#ffffff, #ffffff]" fillAlphas="[1.0, 1.0]">
			<mx:Label text="Layout:"/>
			<mx:ComboBox dataProvider="{layoutOptions}" id="layoutChoose"
			             close="myGraph.changeLayout(ComboBox(event.target).selectedItem.data,true)"
			             width="143" horizontalCenter="-431" verticalCenter="318.5" selectedIndex="1">
			</mx:ComboBox>
			<mx:Button icon="@Embed('img/ZoomIn28.png')" width="40" height="32" horizontalCenter="-331" verticalCenter="323.5">
				<mx:click>
				<![CDATA[
					var center:Point = getViewportCenter();
					Application.application.zoom*=2.0;
					myGraph.scaleX = Application.application.zoom;
					myGraph.scaleY = Application.application.zoom;

					moveToCenter(center.x,center.y);
					// myGraph.zoom(zoom);
				]]>
				</mx:click>
			</mx:Button>
			<mx:Button icon="@Embed('img/ZoomOut28.png')" height="32" horizontalCenter="-283" verticalCenter="323.5">
				<mx:click>
				<![CDATA[
					var center:Point = getViewportCenter();
					Application.application.zoom/=2.0;
					myGraph.scaleX = Application.application.zoom;
					myGraph.scaleY = Application.application.zoom;

					moveToCenter(center.x,center.y);
					// myGraph.zoom(zoom);
				]]>
				</mx:click>
			</mx:Button>
			<mx:Button id="stopButton" label="Stop" horizontalCenter="-143" verticalCenter="318.5">
				<mx:click>
					<![CDATA[
						if (stopButton.label=="Stop"){
							myGraph.stop();
							stopButton.label = "Restart";
						}else{
							myGraph.play();
							stopButton.label = "Stop";
						}
					]]>
				</mx:click>
			</mx:Button>
		</mx:ApplicationControlBar>
	</mx:VBox>
</mx:Application>

